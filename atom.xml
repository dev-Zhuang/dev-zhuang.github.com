<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[数字夜话的博客]]></title>
  <link href="http://dev-zhuang.github.io/atom.xml" rel="self"/>
  <link href="http://dev-zhuang.github.io/"/>
  <updated>2014-08-19T18:54:17+08:00</updated>
  <id>http://dev-zhuang.github.io/</id>
  <author>
    <name><![CDATA[数字夜话]]></name>
    <email><![CDATA[jonz.tech@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[IOS8系列]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/08/17/ios8xi-lie/"/>
    <updated>2014-08-17T18:00:29+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/08/17/ios8xi-lie</id>
    <content type="html"><![CDATA[<p>IOS8系列学习目录整理</p>

<h4>学习路线</h4>

<blockquote><ol>
<li>IOS8 Swift语言与objective-c</li>
<li>IOS8 lib库学习</li>
<li>XCode IDE介绍</li>
<li>Test单元测试</li>
<li>第三方框架</li>
<li>软件工程</li>
<li>用户UI设计</li>
</ol>
</blockquote>

<h4>IOS8语言学习</h4>

<p>IOS语言分为IOS8前的obcjective－c和IOS8后的Swift语言。见Swift语法_学习系列</p>

<h4>IOS8 lib库学习</h4>

<p>与之前的sdk版本相似，sdk内容主要分以下几部分：
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog6_ios8struct-1.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;">
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog6_ios8struct-2.png" title="&#34;模拟器&#34;" alt="&#34;模拟器&#34;"></p>

<br/><br/>




<table border="1">
<tbody>
   <tr border="1px"><td>结构</td><td>描述</td></tr>
   <tr border="1px"><td>framework</td><td>由apple工程师封装的框架</td></tr>
   <tr border="1px"><td>developerframeworks</td><td>由apple工程师封装的测试框架</td></tr>
   <tr border="1px"><td>user/include</td><td>apple常用的一些c/c++函数</td></tr>
   <tr border="1px"><td>user/local/include</td><td>apple对模拟器支持的一些c/c++</td></tr>
   </tbody>
</table>


<p>从IOS的系统层次划分学习单元。分为4层62个框架与其他框架组合11个，总共73个框架。这些框架中可以归纳的知识点包括：图形、流媒体、网络与数据等等。</p>

<table>
    <tr>
        <td>系统层次</td>
        <td>框架名</td>
        <td>描述</td>
    </tr>
    <tr >
        <td rowspan="10">cocoa touch layer（10）</td>
        <td>UIKit</td>  
        <td></td>   
    </tr>
    <tr>
        <td>AddressBookUI</td>
        <td></td>
    </tr>
    <tr >
        <td>EventKitUI</td>
        <td></td>
    </tr>
    <tr>
        <td>Twitter</td>
        <td></td>
    </tr>
    <tr >
        <td>PhotosUI</td>
        <td></td>
    </tr>
    <tr>
        <td>NotificationCenter</td>
        <td></td>
    </tr>
    <tr >
        <td>MessageUI</td>
        <td></td>
    </tr>
    <tr>
        <td>MapKit</td>
        <td></td>
    </tr>
    <tr >
        <td>iAd</td>
        <td></td>
    </tr>
    <tr >
        <td>GameKit</td>
        <td></td>
    </tr>
    
    <tr >
        <td rowspan="22">media layer（22）</td>
        <td>AssetsLibrary</td>  
        <td></td>   
    </tr>
    <tr>
        <td>AudioToolBox</td>
        <td></td>
    </tr>
    <tr >
        <td>AudioUnit</td>
        <td></td>
    </tr>
    <tr>
        <td>AVFoundation</td>
        <td></td>
    </tr>
    <tr >
        <td>CoreAudio</td>
        <td></td>
    </tr>
    <tr>
        <td>CoreGraphics</td>
        <td></td>
    </tr>
    <tr >
        <td>CoreImage</td>
        <td></td>
    </tr>
    <tr>
        <td>CoreMIDI</td>
        <td></td>
    </tr>
    <tr >
        <td>CoreText</td>
        <td></td>
    </tr>
    <tr >
        <td>CoreVideo</td>
        <td></td>
    </tr>
    <tr >
        <td>GameController</td>
        <td></td>
    </tr>
    <tr >
        <td>GLKit</td>
        <td></td>
    </tr>
    <tr >
        <td>ImageIO</td>
        <td></td>
    </tr>
    <tr >
        <td>MediaAccessibility</td>
        <td></td>
    </tr>
    <tr >
        <td>MediaPlayer</td>
        <td></td>
    </tr>
    <tr >
        <td>Metal</td>
        <td></td>
    </tr>
    <tr >
        <td>OpenAL</td>
        <td></td>
    </tr>
    <tr >
        <td>OpenGLES</td>
        <td></td>
    </tr>
    <tr >
        <td>Photos</td>
        <td></td>
    </tr>
    <tr >
        <td>QuartzCore</td>
        <td></td>
    </tr>
    <tr >
        <td>SceneKit</td>
        <td></td>
    </tr>
    <tr >
        <td>SpriteKit</td>
        <td></td>
    </tr>
    
    
    <tr >
        <td rowspan="24">core Services layer（24）</td>
        <td>Accounts</td>   
        <td></td>   
    </tr>
    <tr>
        <td>AddressBook</td>
        <td></td>
    </tr>
    <tr >
        <td>AdSupport</td>
        <td></td>
    </tr>
    <tr>
        <td>CFNetWork</td>
        <td></td>
    </tr>
    <tr >
        <td>CloudKit</td>
        <td></td>
    </tr>
    <tr>
        <td>CoreData</td>
        <td></td>
    </tr>
    <tr >
        <td>CoreFoundation</td>
        <td></td>
    </tr>
    <tr>
        <td>CoreLocation</td>
        <td></td>
    </tr>
    <tr >
        <td>CoreMedia</td>
        <td></td>
    </tr>
    <tr >
        <td>CoreMotion</td>
        <td></td>
    </tr>
    <tr >
        <td>CoreTelephony</td>
        <td></td>
    </tr>
    <tr >
        <td>EventKit</td>
        <td></td>
    </tr>
    <tr >
        <td>Foundation</td>
        <td></td>
    </tr>
    <tr >
        <td>HomeKit</td>
        <td></td>
    </tr>
    <tr >
        <td>javaScriptCore</td>
        <td></td>
    </tr>
    <tr >
        <td>MobileCoreServices</td>
        <td></td>
    </tr>
    <tr >
        <td>MultipeerConnectivity</td>
        <td></td>
    </tr>
    <tr >
        <td>NewsstandKit</td>
        <td></td>
    </tr>
    <tr >
        <td>Passkit</td>
        <td></td>
    </tr>
    <tr >
        <td>QuickLook</td>
        <td></td>
    </tr>
    <tr >
        <td>Social</td>
        <td></td>
    </tr>
    <tr >
        <td>StoreKit</td>
        <td></td>
    </tr>
    <tr >
        <td>SystemConfiguration</td>
        <td></td>
    </tr>
    <tr >
        <td>UIAutomation</td>
        <td></td>
    </tr>
    
    <tr >
        <td rowspan="6">core OS layer（6）</td>
        <td>Accelerate</td> 
        <td></td>   
    </tr>
    <tr>
        <td>CoreBluetooth</td>
        <td></td>
    </tr>
    <tr >
        <td>ExternalAccessory</td>
        <td></td>
    </tr>
    <tr>
        <td>LocalAuthentication</td>
        <td></td>
    </tr>
    <tr >
        <td>Security</td>
        <td></td>
    </tr>
    <tr>
        <td>system</td>
        <td></td>
    </tr>
    
    <tr >
        <td rowspan="18">其他framwork（11）</td>
        <td>ApplicationServices</td>    
        <td></td>   
    </tr>
    <tr>
        <td>AVKit</td>
        <td></td>
    </tr>
    <tr >
        <td>webKit</td>
        <td></td>
    </tr>
    <tr>
        <td>VideoToolBox</td>
        <td></td>
    </tr>
    <tr >
        <td>SafariServices</td>
        <td></td>
    </tr>
    <tr>
        <td>pushKit</td>
        <td></td>
    </tr>
        <tr>
        <td>notificationUI</td>
        <td></td>
    </tr>
    <tr >
        <td>IOKit</td>
        <td></td>
    </tr>
    <tr>
        <td>healthKit</td>
        <td></td>
    </tr>
    <tr >
        <td>GSS</td>
        <td></td>
    </tr>
    <tr>
        <td>MediaToolbox</td>
        <td></td>
    </tr>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[流媒体基本信息]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/07/03/liu-mei-ti-ji-ben-xin-xi/"/>
    <updated>2014-07-03T09:22:00+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/07/03/liu-mei-ti-ji-ben-xin-xi</id>
    <content type="html"><![CDATA[<h4>术语表（Glossary）</h4>

<p>5.1 环绕声（5.1 Surround Sound）：一个环绕声扬声器配置包括5个扬声器位于一个圆周的具体位置和一个低音炮（”.1”）.扬声器频道同在位于：左、中、右、左环绕、右环绕和LFE（低频效果）。</p>

<p>8.24 有时候写作Q8.24 或者fx8.24.定点采样大小(替代32位浮点采样)被当作标准的音频采样类型，来处理线性pcm音频。在8.24音频样本中，左边8位代表整数基点，右边24位代表小数基点。</p>

<p>AAC 高级音频编码(advanced audio coding):一个压缩，有损的感知编码方案。1997年ISO/IEC 13818-7将AAC作为MPEG-2的一部分，成为MPEG-2 AAC。并在MPEG-4中做了增强，MPEG-4 AAC。根据发表在ISO/IEC JTC1/SC29/WG11, N2006 上的结果看，MPEG-2 AAC比MPEG-1，layer3（mp3）在同个位速率（bit rate）上有更好的音频质量。MPEG-4 AAC扩展了MPEG-2 AAC 的额外编码工具。</p>

<p>AC－3 它是杜比公司开发的新一代家庭影院多声道数字音频系统。杜比定向逻辑系统是一个模拟系统。它的四个声道是从编码后的两个声道分解出来的，因此难免有分离度不佳、信噪比不高，对环绕声缺乏立体感，并且环绕声的频带窄等缺点。AC（Audio Coding）指的是数字音频编码，它抛弃了模拟技术，采用的是全新的数字技术。</p>

<p>active 在iOS中用于在播放或者录音时描述audio session的状态是否可持续。比较inactive。</p>

<p>ADC 模拟数字转换器（英语：Analog-to-digital converter, ADC, A/D or A to D）是用于将模拟形式的连续信号转换为数字形式的离散信号的一类设备。一个模拟数字转换器可以提供信号用于测量。与之相对的设备成为数字模拟转换器。典型的模拟数字转换器将模拟信号转换为表示一定比例电压值的数字信号。然而，有一些模拟数字转换器并非纯的电子设备，例如旋转编码器，也可以被视为模拟数字转换器。数字信号输出可能会使用不同的编码结构。通常会使用二进制二补数（也称作“补码”）进行表示，但也有其他情况，例如有的设备使用格雷码（一种循环码）.</p>

<p><a href="http://zh.wikipedia.org/wiki/ADPCM#.E6.95.B8.E4.BD.8D.E5.8C.96">PCM:</a>脉冲编码调制（英文：Pulse-code modulation，缩写：PCM）是一种模拟信号的数字化方法。PCM将信号的强度依照同样的间距分成数段，然后用独特的数字记号（通常是二进制）来量化。PCM常被用于数字电信系统上，也是电脑和红皮书中的标准形式。在数字视频中它也是标准，例如使用 ITU-R BT.601。但是PCM并不流行于诸如DVD或DVR的消费性商品上，因为它需要相当大的比特率（DVD格式虽然支持PCM，不过很少使用）；与之相较，压缩过的音频较符合效率。不过，许多蓝光光盘使用PCM作音频编码。非常频繁地，PCM编码以一种串行通信的形式，使数字传讯由一点至下一点变得更容易——不论在已给定的系统内，或物理位置。</p>

<p>Differential（差异）或Delta PCM（DPCM）纪录的是目前的值与前一个值的差异值。与相等的PCM比较，这种编码只需要25%的比特数。</p>

<p>ADPCM是DPCM的变形，给定一个噪讯比，以节省量化密度的方式，允许更大程度的节省带宽。</p>

<p>AES/EBU的全称是Audio Engineering Society/European Broadcast Union（音频工程师协会/欧洲广播联盟），现已成为专业数字音频较为流行的标准。大量民用产品和专业音频数字设备如CD机、DAT、MD机、数字调音台、数字音频工作站等都支持AES/EBU。它们已经颁布了许多关于数字音频的重要标准。</p>

<p>AES-3 一个在1992年发布的，由AES定义的数字音频传输标准。也叫做AES/EBU接口，等同于IEC 60958 第四部分。AES－3标准包括不同的物理链接：平衡双绞线，非平衡同轴电缆和光纤。AES－3的诞生来源于S/PDIF (Sony/Phillips Digital Interface)标准。数字音频接口协议,可用XLR线传输两路数字音频信号，单向传输,也可用25Pin（25针）线缆传输8路信号，双向传输.</p>

<p>AES/EBU:
AES/EBU标准
AES/EBU是一种通过基于单根绞合线对来传输数字音频数据的串行位传输协议。它无须均衡即可在长达100m的距离上传输数据，如果均衡，可以传输更远距离。它提供两个信道的音频数据（最高24比特量化），信道是自动计时和自同步的。它也提供了传输控制的方法和状态信息的表示(channel status bit)和一些误码的检测能力。它的时钟信息是由传输端控制，来自AES/EBU的位流。它的三个标准采样率是32kHz、44.1kHz、48kHz，当然许多接口能够工作在其它不同的采样率上。
AES/EBU提供“专业”和“消费”两种模式。它们两者最大的不同在于信道状态位格式的提供上。专业模式的状态位格式里包括数字信道的源和目的地址、日期时间码、采样点数、字节长度和其它信息。消费模式包括的东西就比较少，但包含了拷贝保护信息。另外，AES/EBU标准提供“用户数据”，在它的位流里包含用户说明（例如厂商说明等）。图1是AES/EBU专业格式24字节信道状态数据块的一部分。
AES/EBU的普通物理连接媒质有：（1）平衡或差分连接，使用XLR（卡侬）连接器的三芯话筒屏蔽电缆，参数为阻抗110Ω，电平范围0.2V～5Vpp，抖动为±20ns。（2）单端非平衡连接，使用RCA插头的音频同轴电缆。（3）光学连接，使用光纤连接器。</p>

<p>集合设备aggregate device，一组由软件程序控制两个或者多个音频设备互相连接构成的一个单个设备。</p>

<p>音频交换文件格式（Audio Interchange File Format，缩写为AIFF）一种音频格式用于个人电脑和其他电子音频设备存储音频数据。这种格式由苹果公司于1988年在美商艺电的交换档案格式（Interchange File Format，缩写 IFF，广泛使用于Amiga系统）基础上开发而成，并且它多被用在苹果公司的OS X操作系统。在一个标准的AIFF文件中的音频是线性PCM（pulse-code modulation）。还有一种被称为AIFF-C或AIFC的经过压缩的变体，with various defined compression codecs。标准AIFF格式与SDII和WAV一并被认为是专业登记的视频音频编辑应用和的领导性格式，并且与广为人知的有损格式MP3相比，它并未经过压缩。与其它的未压缩无损音频格式相比，AIFF会占用比MP3更多的磁盘空间。在立体声的44.1 kHz采样率和16 bits采样深度的条件下，这个差额大约是每分钟10MB。</p>

<p>音频压缩交换文件（Audio Interchange File Format Extension for Compression)，一个AIFF的扩展，他可以对数据进行压缩或者不压缩。</p>

<p>混淆aliasing，也称为混叠。在声音采样来说，混淆是指在进行取样时，和一个正确频率一起生成的一个错误频率，这时混淆会产生杂音。对于图像生成来说，混淆会产生锯齿状的边缘或者梯阶效果。当采样率低于奈奎斯特频率（即被采样频率的一半）时，被采样波形周期内将少于2个采样，在这种情况下，采样点在播放时将不能重建原信号，而会比原信号的频率低，具体的差异遵循这一公式：新频率=采样频率-被采样信号频率，例如，当以采样率为44.1kHz对一个26kHz的频率进行取样时，ADC读取的将是44.1-26=18.1kHz。[1]</p>

<p><a href="http://baike.baidu.com/view/1060328.htm?from_id=11173461&amp;type=syn&amp;fromtitle=Nyquist+frequency&amp;fr=aladdin">奈奎斯特频率</a>（Nyquist frequency）是离散信号系统采样频率的一半，因哈里·奈奎斯特（Harry Nyquist）或奈奎斯特－香农采样定理得名。采样定理指出，只要离散系统的奈奎斯特频率高于被采样信号的最高频率或带宽，就可以避免混叠现象。</p>

<p>头部相关传输函数（Head Related Transfer Functions，缩写：HRTF）又称为ATF（anatomical transfer function），是一种音效定位算法。</p>

<p>HRTF是一组滤波器，系利用HD ITD（Interaural Time Delay）、IAD（Interaural Amplitude Difference）和耳廓频率振动等技术产生立体音效，使声音传递至人耳内的耳廓，耳道和鼓膜时，聆听者会有环绕音效之感觉，通过DSP，HRTF可实时处理虚拟世界的音源。</p>

<p>平均码率通常是指数字音乐或者视频的平均码率，可以简单的认为等于文件大小除以播放时间。例如常用的RMVB在压缩电影时常常设定视频平均码率为450kbps，则平均每秒占用约55千字节，这样可以估算10分钟的视频大小约为55KB<em>60</em>10=33MB，2小时的视频则约为400MB。码率并不是衡量音频/视频质量的唯一标准，格式、图像大小、音频采样率、音频分辨率等因素也是很重要的指标。由于在实际编码中，会根据图像/音频的复杂程度，而对码率进行一些调整，以达到最好的控制文件大小及质量，因此，最终的平均码率并不能在编码之前确定下来，波动幅度较大。为了从一定程度解决这个问题，二次编码方式诞生了。它在第一次编码时不进行实际编码运算，仅仅是计算码率，第二次利用这一计算结果为基础，根据设定值进行调整，并最终编码。除了平均码率之外，最高码率，或者叫码率峰值，也是与码率有关的一个参数。当码率峰值高过处理器所能处理的强度时，可能会造成播放延迟。以上概念是针对可变码率编码（VBR）而言的，实际上平均码率编码方式理论和此完全不同.</p>

<p>固定码率（英语：Constant bitrate，简称CBR）这是一个用来形容通信服务质量（QoS，Quality of Service）的术语。和该词相对应的词是可变码率或可变比特率（英文variable bit rate，缩写VBR）。当形容编解码器的时候，CBR编码指的是编码器的输出码率（或者解码器的输入码率）应该是固定制（常数）。当在一个带宽受限的信道中进行多媒体通讯的时候CBR是非常有用的，因为这时候受限的是最高码率，CBR可以更容易的使用这样的信道。但是CBR不适合进行存储，因为CBR将导致没有足够的码率对复杂的内容部分进行编码(从而导致质量下降)，同时在简单的内容部分会浪费一些码率。大部分编码方案的输出都是可变长的码字，例如霍夫曼编码或者游程编码（run-length coding），这使得编码器很难做到完美的CBR。编码器可以通过调整量化（进而调整编码质量）来部分的解决这个问题，如果同时使用填充码来完美的达到CBR。（有时候，CBR也指一种非常简单的编码方案，比如将一个16位精度的音频数据流通过抽样得到一个8位精度的数据流）.</p>

<p>可变码率（英语：Variable bitrate，简称VBR）这是一个用来形容通信服务质量（QoS for Quality of Service）的术语。和该词相对应的词是固定码率或固定比特率，英文constant bit rate，缩写CBR。例如，使用MP3格式的音频编解码器，音频文件可以以8~320kbps的可变码率进行压缩，得到相对小的文件来节约存储空间。MP3格式的文件格式是<em>.mp3。当形容编解码器的时候，VBR编码指的是编码器的输出码率（或者解码器的输入码率）可以根据编码器的输入源信号的复杂度自适应的调整，目的是达到保持输出质量保持不变而不是保持输出码率保持不变。VBR适用于存储（不太适用于流式传输），可以更有效地利用有限的存储空间：用比较多的码字对复杂度高的段进行编码，用比较少的码字对复杂度低的段进行编码。像Vorbis这样的编解码器和几乎所有的视频编解码器内在的都是VBR的。</em>.mp3文件也可以以VBR的方式进行编码。</p>

<p>AVI是英语Audio Video Interleave（“音频视频交织”或译为“音频视频交错”）的首字母缩写，由微软在1992年11月推出的一种多媒体文件格式，用于对抗苹果Quicktime的技术。现在所说的AVI多是指一种封装格式。AVI的文件结构、分为“头部”,“主体”和“索引”三部分。主体中图像数据和声音数据是交互存放的。从尾部的索引可以索引跳到自己想放的位置。AVI将视频和音频封装在一个文件里，其顺序是：若干视频帧（Video Frame）之后接着若干音频帧（Audio Frame），再然后是视频帧、音频帧，故名为“音频视频交织”，意即音频和视频按帧交错排列，以此达到音频同步于视频播放的效果。和DVD视频格式一样，AVI文件支持多视频流和音频流，虽然这些功能很少使用。大多数AVI文件还支持由Matrox OpenDML集团于1996年2月开发的格式后缀。这些文件非正式的称为“AVI 2.0”，并得到微软的支持。</p>

<p>带宽（英语：Bandwidth）指信号所占据的频带宽度；在被用来描述信道时，带宽是指能够有效通过该信道的信号的最大频带宽度。对于模拟信号而言，带宽又称为频宽，以赫兹（Hz）为单位。例如模拟语音电话的信号带宽为3400Hz，一个PAL-D电视频道的带宽为8MHz（含保护带宽）。对于数字信号而言，带宽是指单位时间内链路能够通过的数据量。例如ISDN的B信道带宽为64Kbps。由于数字信号的传输是通过模拟信号的调制完成的，为了与模拟带宽进行区分，数字信道的带宽一般直接用波特率或符号率来描述。</p>

<p>采样率（sample rate）：或称“采样速率”，是每秒内采样点（sample）的密集程度，单位是赫兹（Hz）。</p>

<p>采样深度（sample depth）：或称“采样精度”，就是对采样点的采样精确度。单位是比特（bit）。</p>

<p>比特率（Bit rate）：亦称“位速率”，是单位时间内传输送或处理的比特的数量。比特率经常在电信领域用作连接速度、传输速度、信道容量、最大吞吐量和数字带宽容量的同义词，根据位深的幅度分辨率，量化误差.多媒体行业在指音频或者视频在单位时间内的数据传输率时通常使用码流或码率，单位是kbps（千位每秒）。在数字多媒体领域，比特率代表了信息的数量，更详细地说，存储了一个记录的每单位时间。比特率和以下几个因素相关：
原始物质也许取样在不同的频率里
取样可能使用了不同数量的比特
数据可能按照不同的方式编码
信息可能用不同的算法或不同的程度进行数字压缩。</p>

<p>位深（bit depth）：采样方案，每个采样的比特位数。位的深度受其他因素的影响，主要是数字系统的动态范围。</p>

<p>声道（channel）一个分离的音轨。一个单声道的录音或者现场表演有一个声道，一个立体声道的录音或者现场表演有两个声道。一个多音轨的声道和表演可以有多个声道。在一个audio单元中，一个集合可以有一个或多个声道。</p>

<p>声道布局（audio layout）：在一个录音音频中描述播放角色所处声道的信息。例如在立体声道中，声道1表示左前方，声道2表示右前方。</p>

<p>Chunk 含义：Chunk（组块）即由若干个字节（Byte）组成的数据块。Chunk有其特定的结构。结构：一个Chunk由chunk Header（块头）和Chunk Data（块数据）组成。若Chunk Data 没有数据，则此Chunk仅仅包含Chunk Header。由于我们是使用Chunk来存储数据到Chunk Data中的，因此实际使用中Chunk Data大小一般都不为零。组头含义（chunk header）组块数据的头部。代表数据块的格式。</p>

<p>裁切（clipping）： 从一个受限的信号幅度到特定电平所损失的波形值。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[明白AVFoundation]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/06/30/ming-bai-avfoundation/"/>
    <updated>2014-06-30T09:04:03+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/06/30/ming-bai-avfoundation</id>
    <content type="html"><![CDATA[<p>AVFoundation 基本函括了基本的音频操作，信息捕获、编辑基本信息与影片读写。这里只说简单的音频操作。</p>

<h4>什么时候使用AVFoundation</h4>

<blockquote><p>1.获取媒体属性 <br/>
2.自定义播放UI和行为  <br/>
3.组成与组合媒体  <br/>
4.重定义媒体信息 <br/>
5.控制相机特性</p></blockquote>

<h4>AVFoundation位置</h4>

<p>AVFoundation 位于核心层上层，在UIKit下层。
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-1.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<h4>AVFoundation类分组</h4>

<p>AVFoundation类分组主要可以分成4部分：播放设置、信息捕获、编辑和读写4块。</p>

<h4>播放（playback）</h4>

<h5>AVAsset</h5>

<p>AVAsset是定时的视听媒体，它可以是视频、影片、歌曲、播客节目；可以是本地或者远程的；也可以是限定或者非限定的流；<br/>
获取一个AVAsset的方式有：程序捆绑；媒体库；图片库；获取网络地址； <br/>
AVAsset的组成：AVAssetTrackSegment->AVAssetTrack->AVAsset;  <br/>
AVAssect信息获取会花费一定时间的原因：读取不同的文件格式、大文件文件信息读取，网络文件读取 <br/>
异步键值加载协议：告诉我们媒体什么时候值有效，可以准备播放。</p>

<h5>AVPlayer</h5>

<p>AVPlayer是一个控制对象，它可以做的操作有：播放、停止和速率；不同AVAsset可以有不同的播放属性。</p>

<p>一个AVPlayer可以有多个AVAsset，OC通过AVPlayerItem来协调AVAsst和AVPlayer之间的关系。AVPlayerItem与AVAsset一样，同样有AVPlayerItemTrack对象。</p>

<h5>AVPlayerLayer</h5>

<p>播放对象与视图之间的实现需要通过AVPlayerLayer来控制。具体播放一个音频视频的步骤是：</p>

<p>播放步骤集合：</p>

<blockquote><p>1.创建一个AVAsset<br/>
2.告诉asset的Track可以被加载了<br/>
3.一旦加载，为asset创建一个PlayerItem<br/>
4.把Item赋值给Player<br/>
5.把Player复制给PlayerLayer<br/>
6.等待直到Item准备好播放，然后开始播放。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">AVAsset</span> <span class="o">*</span><span class="n">asset</span> <span class="o">=</span> <span class="o">[</span><span class="no">AVURLAsset</span> <span class="ss">URLAssetWithURL</span><span class="p">:</span><span class="n">fileURL</span> <span class="ss">options</span><span class="p">:</span><span class="kp">nil</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="no">NSArray</span> <span class="o">*</span><span class="n">requestKeys</span> <span class="o">=</span> <span class="o">[</span><span class="no">NSArray</span> <span class="ss">arrayWithObjects</span><span class="p">:</span><span class="err">@“</span><span class="n">tracks</span><span class="err">”</span><span class="p">,</span><span class="err">@”</span><span class="n">playable</span><span class="err">”</span><span class="p">,</span><span class="kp">nil</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="o">[</span><span class="n">asset</span> <span class="ss">loadValuesAsynchoronouslyForKeys</span><span class="p">:</span><span class="n">requestKeys</span> <span class="ss">competionHandler</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="sr">//</span><span class="n">complete</span> <span class="n">block</span> <span class="n">here</span>
</span><span class='line'>      <span class="no">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">;</span>
</span><span class='line'>      <span class="no">AVKeyValueStatus</span> <span class="n">status</span> <span class="o">=[</span><span class="n">asset</span> <span class="ss">statusOfValueForKey</span><span class="p">:</span><span class="err">@“</span><span class="n">tracks</span><span class="err">”</span><span class="p">,</span><span class="ss">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="no">AVKeyValueStatusLoaded</span><span class="p">){</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">.</span><span class="n">PlayerItem</span> <span class="o">=</span> <span class="o">[</span><span class="no">AVPlayerItem</span> <span class="ss">playerItemWithAsset</span><span class="p">:</span><span class="n">asset</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">.</span><span class="n">player</span> <span class="o">=</span> <span class="o">[</span><span class="no">AVPlayer</span> <span class="ss">playerWithPlayerItem</span><span class="p">:</span><span class="n">playerItem</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>          <span class="o">[</span><span class="n">playerView</span>  <span class="ss">setPlayer</span><span class="p">:</span><span class="n">player</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="sr">//</span><span class="n">don</span><span class="err">’</span><span class="n">t</span> <span class="nb">load</span> <span class="o">!</span> <span class="n">need</span> <span class="n">to</span> <span class="k">do</span> <span class="n">something</span><span class="o">~</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="sr">//</span><span class="err">等待加载完成</span>
</span><span class='line'><span class="n">static</span> <span class="n">void</span> <span class="o">*</span> <span class="n">playerItemStatueContext</span><span class="o">=&amp;</span><span class="no">PlayerItemStatue</span><span class="p">;</span>
</span><span class='line'><span class="sr">//</span><span class="err">添加观察者</span>
</span><span class='line'><span class="o">[</span><span class="n">playerItem</span> <span class="ss">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="ss">forKeyPath</span><span class="p">:</span><span class="nb">self</span> <span class="ss">options</span><span class="p">:</span><span class="mi">0</span> <span class="ss">context</span><span class="p">:</span><span class="n">playerItemStatueContext</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span><span class="err">显示到</span><span class="n">uiview</span><span class="err">的</span><span class="n">layer</span><span class="err">层上</span>
</span><span class='line'><span class="sr">//</span><span class="err">添加结束通知</span>
</span><span class='line'><span class="o">[[</span><span class="no">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="o">]</span><span class="ss">addObser</span><span class="p">:</span><span class="nb">self</span> <span class="ss">selector</span><span class="p">:</span><span class="vi">@selector</span><span class="p">(</span><span class="ss">endMethod</span><span class="p">:)</span> <span class="nb">name</span><span class="ss">:AVPlayerItemDidPlayEndTimeNotification</span><span class="o">]</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加滑动条：开始：暂停播放和移除通知。  <br/>
更新播放时间：<code>seekToTime：</code></p>

<p>关于播放要记住的：</p>

<blockquote><p>1.Player 是一个控制器<br/>
2.player Item 控制当前状态<br/>
3.显示由一个player layer处理<br/>
4.注意你的播放队列。</p></blockquote>

<h4>编辑（Editing）</h4>

<p>由asset集合组成小块作品：它可以是多个不同asset的组成；</p>

<p>AVCompositonTrackSegment->AVCompositionTrack->AVComposition</p>

<p><img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-2.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;">
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-3.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<h5>时间控制需要注意的事项：</h5>

<blockquote><p>1.浮点数不允许精确的时间估算。<br/>
2.奇怪的时间尺度：29.97与30000/1001不相等。<br/>
3.混合的时间尺度：29.97fps视频和44.1kHz音频</p></blockquote>

<p>OS中使用的时间:
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-4.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;">
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-5.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;">
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-6.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<p>音频混合:</p>

<blockquote><p>1.临近的部分:AVCompostion；  <br/>
2.合并音频轨迹：AVAudioMix；  <br/>
3.合并视频轨迹：compositing;</p></blockquote>

<p>音频混合对象：AVMutableAudioMixInputParameters &ndash;>AVMutableAudioMix <br/>
每一个音频混合输入参数：1.由一个音轨组成。2。描述了如何通过时间调整声音。<br/>
默认的声音不涉及混合。</p>

<p>视频复合：</p>

<blockquote><p>1.临近的部分：AVComposition；  <br/>
2.合并音频轨迹：AVAudioMix；  <br/>
3.合并视频轨迹：AVVideoComposition；</p></blockquote>

<p>AVComposition和AVVideoComposition
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-7.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<p>AVVideoComposition需要做的：
对于每一个时间范围的AVAsset：<br/>
1.创建一个对应时间范围的AVMutableVideoCompositionInstruction对象。<br/>
2.对于每一个轨迹，都是复合的一部分：为轨迹创建一个AVMutableVideoCompositionLayerInstruction对象。<br/>
3.明确指定透明度。明确指定开始与结束的矩阵转换。</p>

<p>音频VS视频 <br/>
音频:1.对于每一个轨迹都是描述体积变化的时间范围。2.包含绝对的轨迹。 <br/>
视频:1.对于每一个时间范围，在轨迹上描述指令组成信息。2.必须明确的包含轨迹</p>

<p>协调合并对象进行工作：
AVAudioMix与AVVideoComposition：<br/>
1.他们都不是对象asset对象集合。<br/>
2.操作时使用对象Asset。 <br/>
3.要使用行为时，将传递到控制对象。可以合并的控制对象有：
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-8.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<p>编辑要记住的：</p>

<blockquote><p>1.composition是Asset的集合。他们由其他asset的segment对象组成。<br/>
2.他们通过轨迹进行音频混合。操作可能是不明显的。<br/>
3.视频Composition是一个合成的时间范围。它的操作要是显性的。</p></blockquote>

<h4>核心动画与媒体（Core animation and media）</h4>

<p>1.所有的UIKit渲染都使用了核心动画。 <br/>
2. 我们想对事物做的图形操作，如标题。<br/>
3.核心动画对于图形的渲染、投射和动画有极大的实用性。</p>

<p>核心动画与AV foundation<br/>
1. UIView使用CALayer 子类。 <br/>
2. AVFoundation 提供CALayer子类：如，演示影片使用AVPlayerLayer。显示捕获的视频使用   AVCaptureVideoPreviewLayer。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单词记录]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/06/26/dan-ci-ji-lu/"/>
    <updated>2014-06-26T15:31:47+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/06/26/dan-ci-ji-lu</id>
    <content type="html"><![CDATA[<p>Audio Engineering Society
音频工程协会</p>

<p>differential pulse code modulation
差分脉冲编码调制</p>

<p>pulse-code modulation
脉码调制</p>

<p>adaptive delta pulse code modulation
自适应脉冲编码调制</p>

<p>noise floor
噪声层</p>

<p>quantization error    <br/>
量化误差</p>

<p>amplitude resolution      <br/>
幅度分辨率；幅值分辨率</p>

<p>in terms of
根据;用…的话; 就…而言; 以…为单位;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知识点收集(不定期更新)]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/06/05/zhi-shi-dian-shou-ji/"/>
    <updated>2014-06-05T18:41:47+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/06/05/zhi-shi-dian-shou-ji</id>
    <content type="html"><![CDATA[<h4>mac OS下安装Yasm</h4>

<blockquote><ol>
<li>到［yasm官网]<a href="http://yasm.tortall.net/Download.html">ref2</a>下载sourcecode。（我下的是yasm 1.2）</li>
<li>解压缩压缩包</li>
<li>终端terminate cd 到yasm1.2.0文件夹</li>
<li>执行./configure</li>
<li>执行make&amp;&amp;make install</li>
<li>待执行完成，输入yams —-version 查看ban版本。若存在，表示安装成功。</li>
</ol>
</blockquote>

<h4>IOS CoreData error”Cannot create an NSPersistentStoreCoordinator with a nil model”</h4>

<p>由于不小心删除了app中的数据模型文件，只能重新添加，之后给数据模型换名字、原名和修改path路径，怎么弄一直编译不通过。最后发现在build Phases》copy bundle Resources里没有模型的文件。添加上，编译通过。</p>

<h4>IOS7 uiscrollview子视图下移</h4>

<p>在NavigationController的视图下，给viewcontroller添加UISCrollview, scrollview添加子视图。发现scrollview中的子视图下移60px。
解决办法:<a href="http://blog.sina.com.cn/s/blog_693850220101ev1i.html">见andy的博客</a></p>

<h4>文件类型</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>enum { DT_UNKNOWN = 0,  // unknown type           未知类型
</span><span class='line'>    #define DT_UNKNOWN DT_UNKNOWN       
</span><span class='line'>    DT_FIFO = 1,     // a named pipe, or FIFO  管道类型或先进先出
</span><span class='line'>    #define DT_FIFO DT_FIFO
</span><span class='line'>    DT_CHR = 2,     // a character device      字符设备、流
</span><span class='line'>    #define DT_CHR DT_CHR
</span><span class='line'>    DT_DIR = 4,     // a directory             目录文件
</span><span class='line'>    #define DT_DIR DT_DIR
</span><span class='line'>    DT_BLK = 6,     // a block device          块设备
</span><span class='line'>    #define DT_BLK DT_BLK
</span><span class='line'>    DT_REG = 8,     // regular file            普通常规文件
</span><span class='line'>    #define DT_REG DT_REG
</span><span class='line'>    DT_LNK = 10,    // symbolic link           符号链接
</span><span class='line'>    #define DT_LNK DT_LNK
</span><span class='line'>    DT_SOCK = 12,   // local domain socket     socket套接字
</span><span class='line'>    #define DT_SOCK DT_SOCK                    
</span><span class='line'>    DT_WHT = 14     // whiteout                
</span><span class='line'>    #define DT_WHT DT_WHT  
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift 函数与类]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/06/05/swift-han-shu-yu-lei/"/>
    <updated>2014-06-05T13:22:55+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/06/05/swift-han-shu-yu-lei</id>
    <content type="html"><![CDATA[<p>上一篇文章，初步了解了swift与xcode 6的内容。下面继续总结swift语法中的函数与类。</p>

<h4>函数与闭包 (Functions and Closures)</h4>

<hr />

<p>swift函数定义规则是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="err">函数名</span><span class="p">(</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">,</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span><span class="o">-&gt;</span> <span class="err">返回值类型</span> <span class="p">{</span>
</span><span class='line'>    <span class="sr">//</span><span class="err">函数主体</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">//</span><span class="err">例子</span>
</span><span class='line'><span class="n">func</span> <span class="n">sumOf</span><span class="p">(</span><span class="ss">numbers</span><span class="p">:</span> <span class="no">Int</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">numbers</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sum</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">sumOf</span><span class="p">()</span>              <span class="sr">//</span> <span class="ss">result</span><span class="p">:</span><span class="mi">0</span>
</span><span class='line'><span class="n">sumOf</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">597</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>   <span class="sr">//</span> <span class="ss">result</span><span class="p">:</span><span class="mi">651</span>
</span><span class='line'>
</span><span class='line'><span class="o">/*-----------</span> <span class="err">返回一个函数名，它也是一个内嵌函数</span> <span class="o">------------*/</span>
</span><span class='line'><span class="n">func</span> <span class="err">函数名</span><span class="p">(</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">,</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span><span class="o">-&gt;</span> <span class="p">(</span><span class="err">参数类型</span><span class="mi">1</span> <span class="o">-&gt;</span> <span class="err">返回类型</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">nestedFunc</span><span class="p">(</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="mi">1</span><span class="p">)</span><span class="err">－</span><span class="o">&gt;</span><span class="err">返回类型</span><span class="mi">1</span><span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="err">返回类型</span><span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nestedFunc</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">//</span><span class="err">例子</span>
</span><span class='line'><span class="n">func</span> <span class="n">makeIncrementer</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="no">Int</span> <span class="o">-&gt;</span> <span class="no">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">addOne</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">addOne</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">increment</span> <span class="o">=</span> <span class="n">makeIncrementer</span><span class="p">()</span>
</span><span class='line'><span class="n">increment</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>  <span class="sr">//</span><span class="ss">result</span><span class="p">:</span> <span class="mi">8</span>
</span><span class='line'>
</span><span class='line'><span class="o">/*-----------</span> <span class="err">把函数作为函数的一个参数</span> <span class="o">------------*/</span>
</span><span class='line'><span class="n">func</span> <span class="err">函数名</span><span class="p">(</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">,</span><span class="err">函数名</span><span class="p">:</span><span class="err">参数类型</span> <span class="o">-&gt;</span> <span class="err">返回类型</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="err">返回类型</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">//</span><span class="err">例子</span><span class="p">,</span><span class="err">判断是否存在小于</span><span class="mi">10</span><span class="err">的数字</span>
</span><span class='line'><span class="n">func</span> <span class="n">hasAnyMatches</span><span class="p">(</span><span class="ss">list</span><span class="p">:</span> <span class="no">Int</span><span class="o">[]</span><span class="p">,</span> <span class="ss">condition</span><span class="p">:</span> <span class="no">Int</span> <span class="o">-&gt;</span> <span class="no">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">list</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">condition</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">lessThanTen</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">number</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="o">]</span>
</span><span class='line'><span class="n">hasAnyMatches</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">lessThanTen</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
* 返回类型支持返回多个值。方法是使用括号括住返回值:(rA,rB,rC)<br/>
* 参数列表也支持输入一组有效的参数值,将以数组形式传入函数。<br/>
* <code>内嵌函数</code>函数可以互相嵌套，内部函数可以使用外部函数的值。<br/>
* 函数可以作为一个类型被返回。<br/>
* 函数可以作为一个参数被传入到另外一个函数。</p>

<h4>闭包(Closure)</h4>

<p>闭包是一个不显示参数与返回类型的特殊函数，你可以通过闭包来写一个匿名函数，将主体写在<code>{}</code>中，用<code>in</code>区分<code>主体</code>与<code>参数值</code>、<code>返回类型</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">)</span><span class="o">-&gt;</span><span class="err">返回类型</span> <span class="k">in</span>
</span><span class='line'>    <span class="sr">//</span><span class="n">closure</span> <span class="n">body</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">返回类型值</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">//</span> <span class="err">例子</span><span class="p">,</span><span class="err">返回一个包含运行闭包后的结果集合。先看看</span><span class="n">map</span><span class="err">的定义</span><span class="p">:</span>
</span><span class='line'><span class="sr">//</span><span class="err">—————————————</span><span class="k">begin</span><span class="err">—————————————————</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span> <span class="no">Return</span> <span class="n">a</span> <span class="nb">Array</span> <span class="n">containing</span> <span class="n">the</span> <span class="n">results</span> <span class="n">of</span> <span class="n">calling</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span> <span class="sb">`transform(x)`</span> <span class="n">on</span> <span class="n">each</span> <span class="n">element</span> <span class="sb">`x`</span> <span class="n">of</span> <span class="sb">`self`</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span> <span class="err">返回一组</span><span class="p">(</span><span class="err">每个子元素都</span><span class="p">)</span><span class="err">调用闭包后的结果集合</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="ss">transform</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="o">[]</span>
</span><span class='line'><span class="sr">//</span><span class="err">—————————————</span><span class="k">end</span><span class="err">—————————————————</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="o">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">result</span>  <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="n">map</span><span class="p">(</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(result)&quot;</span><span class="p">)</span>  <span class="sr">//</span> <span class="ss">result</span><span class="p">:</span> <span class="o">[</span><span class="mi">60</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">36</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">){</span><span class="vg">$0</span><span class="o">&gt;</span><span class="vg">$1</span><span class="p">}</span>      <span class="sr">//</span><span class="err">结果执行过程看下图</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(result)&quot;</span><span class="p">);</span> <span class="sr">//</span><span class="ss">result</span><span class="p">:</span><span class="o">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog4_swift-01.jpg" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<h4>对象和类(Objects and Classes)</h4>

<p>类的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="ss">classname</span><span class="p">:</span><span class="n">inheritType</span><span class="p">{</span><span class="o">//</span><span class="ss">:inheritType</span> <span class="err">是继承对象。在这里是可选值。</span>
</span><span class='line'><span class="sr">//</span><span class="n">here</span> <span class="n">is</span> <span class="n">your</span> <span class="n">code</span>
</span><span class='line'>  <span class="sr">//</span><span class="n">properties</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">aString</span> <span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="sr">//</span><span class="o">//</span>      <span class="err">注意不允许在</span><span class="n">set</span><span class="err">方法中对自身值进行赋值，否则将导致死循环。</span>
</span><span class='line'><span class="sr">//</span>        <span class="n">set</span> <span class="p">{</span><span class="o">//</span><span class="err">默认传入值用</span><span class="n">newValue</span><span class="err">表示，也可以用</span> <span class="n">set</span> <span class="p">(</span><span class="n">newname</span><span class="p">)</span> <span class="err">来设置一个新值的别名</span>
</span><span class='line'><span class="sr">//</span>            <span class="n">println</span><span class="p">(</span><span class="s2">&quot;set value as \(newValue)&quot;</span><span class="p">)</span> <span class="sr">//</span><span class="n">println</span><span class="p">(</span><span class="s2">&quot;set value as \(newname)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="sr">//</span>        <span class="p">}</span>
</span><span class='line'><span class="sr">//</span>
</span><span class='line'><span class="sr">//</span>        <span class="n">get</span> <span class="p">{</span>
</span><span class='line'><span class="sr">//</span>            <span class="k">return</span> <span class="nb">self</span><span class="o">.</span><span class="n">aString</span>
</span><span class='line'><span class="sr">//</span>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span><span class="o">//</span>   <span class="err">注意，</span><span class="n">set</span> <span class="err">和</span><span class="n">get</span><span class="err">必须同时存在，否则编译器报错。</span>
</span><span class='line'><span class="sr">//</span><span class="o">//</span>        <span class="n">willSet</span><span class="err">和</span><span class="n">didSet</span><span class="err">必须同时存在。</span>
</span><span class='line'><span class="sr">//</span><span class="o">//</span>        <span class="n">set</span><span class="err">，</span><span class="n">get</span><span class="err">和</span><span class="n">willSet</span><span class="err">，</span><span class="n">didSet</span><span class="err">不能同时存在</span>
</span><span class='line'>        <span class="n">willSet</span> <span class="p">(</span><span class="n">anewvalue</span><span class="p">){</span> <span class="sr">//</span><span class="err">这里使用了新值的别名</span><span class="n">anewvalue</span><span class="err">，默认为</span><span class="n">newValue</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s2">&quot;self.aString:\(self.aString) set as newValue:\(anewvalue)&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">didSet</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s2">&quot;after set \(self.aString)&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>        <span class="sr">//</span> <span class="n">methodes</span>
</span><span class='line'>  <span class="n">init</span><span class="p">(){</span> <span class="sr">//</span><span class="err">构造方法，若不添加编译器将会报错。</span>
</span><span class='line'>      <span class="k">super</span><span class="o">.</span><span class="n">init</span><span class="p">();</span><span class="o">//</span><span class="err">调用父类的构造方法。注意：这里必须顺序，先初始化父类构造方法，子类才能调用父类属性与方法。</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">aString</span> <span class="o">=</span> <span class="n">aStr</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">deinit</span><span class="p">{</span><span class="o">//</span><span class="err">析构方法，可选方法：此方法不需要参数</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="sr">/*</span>
</span><span class='line'><span class="sr"> override func aFuncInInheritType(){/</span><span class="o">/</span><span class="err">父类方法重写</span><span class="o">.</span><span class="err">若需要重写父类方法，可以使用</span><span class="n">override</span><span class="err">关键字</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">*</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="ss">aclass</span><span class="p">:</span><span class="no">MyClass</span> <span class="o">=</span> <span class="no">MyClass</span><span class="p">(</span><span class="ss">aStr</span><span class="p">:</span><span class="s2">&quot;hello”);//此处willSet和didSet方法不执行。只执行了set和get方法</span>
</span><span class='line'><span class="s2">    aclass.aString = &quot;</span><span class="n">hello</span><span class="p">,</span><span class="n">word</span><span class="err">”</span><span class="p">;</span><span class="o">//</span><span class="err">此处执行</span><span class="n">willSet</span><span class="err">和</span><span class="n">didSet</span><span class="err">。说明</span><span class="n">willSet</span><span class="err">、</span><span class="n">didSet</span><span class="err">在初始化时不调用，</span><span class="n">set</span><span class="err">、</span><span class="n">get</span><span class="err">方法每次对其进行赋值，都会被调用。</span>
</span></code></pre></td></tr></table></div></figure>


<p>处理变量的可选值时,你可以在操作(比如方法、属性和子脚本)之前加?。如果?之前的 值是 nil,?后面的东西都会被忽略,并且整个表达式返回 nil。否则,?之后的东西都会被运行。</p>

<h4>枚举与结构体(Enumerations and Structures)</h4>

<h5>枚举用enum来定义：<code>enum 枚举名:枚举类型{枚举体}</code>，枚举类型可选。例如：</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="err">定义扑克的</span><span class="n">A</span><span class="err">－</span><span class="n">K</span><span class="err">，数值从</span><span class="mi">1</span><span class="err">开始增加，且定义一个</span><span class="n">simpleDescription</span><span class="err">函数，用于输出切换数值和名称。</span>
</span><span class='line'><span class="n">enum</span> <span class="ss">Rank</span><span class="p">:</span> <span class="no">Int</span> <span class="p">{</span> <span class="sr">//</span><span class="err">若去掉</span><span class="ss">:Int</span> <span class="err">则不允许赋值</span><span class="no">Ace</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="no">Ace</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="no">Two</span><span class="p">,</span> <span class="no">Three</span><span class="p">,</span> <span class="no">Four</span><span class="p">,</span> <span class="no">Five</span><span class="p">,</span> <span class="no">Six</span><span class="p">,</span> <span class="no">Seven</span><span class="p">,</span> <span class="no">Eight</span><span class="p">,</span> <span class="no">Nine</span><span class="p">,</span> <span class="no">Ten</span>
</span><span class='line'>        <span class="k">case</span> <span class="no">Jack</span><span class="p">,</span> <span class="no">Queen</span><span class="p">,</span> <span class="no">King</span>
</span><span class='line'>        <span class="n">func</span> <span class="n">simpleDescription</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">switch</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="no">Rank</span><span class="o">.</span><span class="n">Ace</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="s2">&quot;ace&quot;</span>
</span><span class='line'>            <span class="k">case</span> <span class="no">Rank</span><span class="o">.</span><span class="n">Jack</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="s2">&quot;jack&quot;</span>
</span><span class='line'>            <span class="k">case</span> <span class="o">.</span><span class="n">Queen</span><span class="p">:</span>            <span class="sr">//</span><span class="err">可用</span><span class="sb">`.Queen`</span><span class="err">表示</span><span class="no">Rank</span><span class="o">.</span><span class="n">Queen</span>
</span><span class='line'>                <span class="k">return</span> <span class="s2">&quot;queen&quot;</span>
</span><span class='line'>            <span class="k">case</span> <span class="o">.</span><span class="n">King</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="s2">&quot;king&quot;</span>
</span><span class='line'>            <span class="ss">default</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">toRaw</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">queen</span> <span class="o">=</span> <span class="no">Rank</span><span class="o">.</span><span class="n">Queen</span>            <span class="sr">//</span><span class="err">枚举一个</span><span class="n">ace</span>
</span><span class='line'><span class="n">let</span> <span class="n">queenRawValue</span> <span class="o">=</span> <span class="n">queen</span><span class="o">.</span><span class="n">toRaw</span><span class="p">()</span>          <span class="sr">//</span><span class="err">切换为数值，</span><span class="ss">result</span><span class="p">:</span><span class="mi">12</span>
</span><span class='line'><span class="n">var</span> <span class="n">des</span> <span class="o">=</span> <span class="n">queen</span><span class="o">.</span><span class="n">simpleDescription</span><span class="p">()</span>      <span class="sr">//</span><span class="err">输出枚举字符描述</span><span class="p">,</span><span class="ss">result</span><span class="p">:</span><span class="n">ace</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">convertedRank</span> <span class="o">=</span> <span class="no">Rank</span><span class="o">.</span><span class="n">fromRaw</span><span class="p">(</span><span class="n">queenRawValue</span><span class="p">)</span> <span class="p">{</span> <span class="sr">//</span><span class="err">将</span><span class="mi">12</span><span class="err">转换为枚举类型，等价于</span><span class="no">Rank</span><span class="o">.</span><span class="n">Queen</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">threeDescription</span> <span class="o">=</span> <span class="n">convertedRank</span><span class="o">.</span><span class="n">simpleDescription</span><span class="p">()</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(threeDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>toRaw()转换为数值，fromRaw(avalue)将avalue转换为枚举型。</p>

<h4>接口与扩展(Protocols and Extensions)</h4>

<p>swift中同样用<code>protocol</code>来声明接口，类、枚举和结构体都可以实现接口。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">protocol</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SimpleClass</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="o">=</span> <span class="s2">&quot;A very simple class.&quot;</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">anotherProperty</span><span class="p">:</span> <span class="no">Int</span> <span class="o">=</span> <span class="mi">69105</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">simpleDescription</span> <span class="o">+=</span> <span class="s2">&quot;  Now 100% adjusted.&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">struct</span> <span class="ss">SimpleStructure</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="o">=</span> <span class="s2">&quot;A simple structure&quot;</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">simpleDescription</span> <span class="o">+=</span> <span class="s2">&quot; (adjusted)&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>mutating 用于修饰一个可被修改的函数体。当接口被类继承时，不需要用mutating 来重写方法体，当接口被枚举和结构体的使用，使用mutating关键字来重新修改结构体。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">extension</span> <span class="no">Int</span><span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">descript</span><span class="p">()</span><span class="o">-&gt;</span><span class="nb">String</span><span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;int value is:\(self)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">extension</span> <span class="ss">Int</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;The number \(self)&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span> <span class="o">+=</span> <span class="mi">42</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用extension为某个类型扩展变量或者方法。当运行时赋值对象与定义变量类型不符时，只实现变量类型的那部分实现。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="ss">simpleClassA</span><span class="p">:</span> <span class="no">SimpleClass</span> <span class="o">=</span> <span class="no">SimpleClass</span><span class="p">();</span>
</span><span class='line'><span class="n">simpleClassA</span><span class="o">.</span><span class="n">adjust</span><span class="p">();</span>
</span><span class='line'><span class="n">let</span> <span class="ss">protocolValue</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="o">=</span> <span class="n">simpleClassA</span><span class="p">;</span>  <span class="sr">//</span><span class="err">把</span><span class="n">simpleClass</span><span class="err">类赋值给</span><span class="n">protocolValue</span><span class="err">，</span><span class="n">protocolValue</span><span class="err">为接口类型时，编译器只将</span><span class="no">SimpleClass</span><span class="err">实现</span><span class="no">ExampleProtocol</span> <span class="err">赋值给</span><span class="n">protocolValue</span><span class="err">，所以你不能通过</span><span class="n">protocolValue</span><span class="err">调用</span><span class="n">simpleclassA</span><span class="err">的属性或方法。</span>
</span><span class='line'><span class="n">protocolValue</span><span class="o">.</span><span class="n">simpleDescription</span>
</span><span class='line'><span class="sr">//</span> <span class="n">protocolValue</span><span class="o">.</span><span class="n">anotherProperty</span>  <span class="sr">//</span> <span class="no">Uncomment</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<h4>泛型(Generics)</h4>

<p>在尖括号里写一个名字来创建一个泛型函数或者类型。泛型类型可以在函数和方法中使用，也可以在类，枚举和结构体使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="err">函数定义的乏型</span>
</span><span class='line'><span class="n">func</span> <span class="n">funcGenerics</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="ss">item</span><span class="p">:</span><span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">[]</span><span class="p">{</span> <span class="sr">//</span><span class="err">为方法定义泛型</span><span class="n">T</span><span class="p">,</span><span class="err">而</span><span class="n">T</span><span class="err">的类型是参数的格式（由参数判定）</span><span class="p">,</span><span class="err">返回是参数格式的数组</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="n">T</span><span class="o">[]</span><span class="p">();</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">+=</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">fg</span> <span class="o">=</span> <span class="n">funcGenerics</span><span class="p">(</span><span class="err">”</span><span class="n">hello</span><span class="err">”</span><span class="p">);</span><span class="o">//</span><span class="err">返回一个</span><span class="nb">String</span><span class="err">类型数组</span>
</span><span class='line'><span class="n">let</span> <span class="n">fg2</span><span class="o">=</span> <span class="n">funcGenerics</span><span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">141592628</span><span class="p">);</span><span class="o">//</span><span class="err">返回一个</span><span class="no">Double</span><span class="err">型数组。</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span><span class="err">类泛型</span>
</span><span class='line'><span class="k">class</span> <span class="n">classGenerics</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="nb">method</span><span class="p">(</span><span class="ss">a</span><span class="p">:</span><span class="n">T</span><span class="p">){</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">gClass</span> <span class="o">=</span> <span class="n">classGenerics</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">gClass</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="s2">&quot;aString&quot;</span><span class="p">);</span>
</span><span class='line'><span class="sr">//</span><span class="err">或者－－－－－</span><span class="no">Double</span><span class="err">类型</span>
</span><span class='line'><span class="n">var</span> <span class="n">gClass</span> <span class="o">=</span> <span class="n">classGenerics</span><span class="o">&lt;</span><span class="no">Double</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">gClass</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">1415926</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span><span class="err">枚举泛型</span>
</span><span class='line'><span class="n">enum</span> <span class="n">enumGenerics</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">b</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>        <span class="n">mutating</span> <span class="n">func</span> <span class="n">description</span><span class="p">(){</span>
</span><span class='line'>            <span class="n">switch</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="ss">a</span><span class="p">:</span><span class="n">println</span><span class="p">(</span> <span class="s2">&quot;result is none&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">case</span> <span class="n">b</span><span class="p">(</span><span class="n">var</span> <span class="n">val</span><span class="p">)</span><span class="ss">:println</span><span class="p">(</span><span class="s2">&quot;result in b(T) is:\(val)”)//定义一个val变狼，类型为T</span>
</span><span class='line'><span class="s2">            }</span>
</span><span class='line'><span class="s2">        }</span>
</span><span class='line'><span class="s2">    }</span>
</span><span class='line'><span class="s2">var eg = enumGenerics&lt;Int&gt;.b(13);</span>
</span><span class='line'><span class="s2">    eg.description();</span>
</span><span class='line'><span class="s2">var eg = enumGenerics&lt;String&gt;.b(&quot;</span><span class="n">a</span> <span class="n">string</span> <span class="k">in</span> <span class="n">enum</span> <span class="no">Generics</span><span class="s2">&quot;);</span>
</span><span class='line'><span class="s2">    eg.description();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s2">//结构泛型</span>
</span><span class='line'><span class="s2">struct StructGenerics&lt;T&gt;{</span>
</span><span class='line'><span class="s2">     typealias ItemType = T //定义一个T类型别名。</span>
</span><span class='line'><span class="s2">     mutating func adjust(a: ItemType) {</span>
</span><span class='line'><span class="s2"> println(a);</span>
</span><span class='line'><span class="s2">     }</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2">var sg = StructGenerics&lt;Int&gt;();</span>
</span><span class='line'><span class="s2">    sg.adjust(34);</span>
</span><span class='line'><span class="s2">var sg = StructGenerics&lt;String&gt;();</span>
</span><span class='line'><span class="s2">    sg.adjust(&quot;</span><span class="n">struct</span> <span class="n">result</span> <span class="n">is</span> <span class="mi">34</span><span class="s2">&quot;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在类型名后面使用 where 来指定一个需求列表——例如,要限定实现一个协议的类型,需要限定两个类型要相同,或者限定一个类必须有一个特定的父类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">anyCommonElements</span> <span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">U</span> <span class="n">where</span> <span class="ss">T</span><span class="p">:</span> <span class="no">Sequence</span><span class="p">,</span> <span class="ss">U</span><span class="p">:</span> <span class="no">Sequence</span><span class="p">,</span> <span class="n">T</span><span class="o">.</span><span class="n">GeneratorType</span><span class="o">.</span><span class="n">Element</span><span class="p">:</span> <span class="no">Equatable</span><span class="p">,</span> <span class="n">T</span><span class="o">.</span><span class="n">GeneratorType</span><span class="o">.</span><span class="n">Element</span> <span class="o">==</span> <span class="n">U</span><span class="o">.</span><span class="n">GeneratorType</span><span class="o">.</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">(</span><span class="ss">lhs</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="ss">rhs</span><span class="p">:</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">lhsItem</span> <span class="k">in</span> <span class="n">lhs</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">rhsItem</span> <span class="k">in</span> <span class="n">rhs</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">lhsItem</span> <span class="o">==</span> <span class="n">rhsItem</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">anyCommonElements</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switf 初学习]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/06/04/switf-chu-xue-xi/"/>
    <updated>2014-06-04T05:31:29+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/06/04/switf-chu-xue-xi</id>
    <content type="html"><![CDATA[<p>wwwdc 2014大会,苹果推出了新语言&mdash;雨燕<code>swift</code>。虽然很多开发者如往年一样，进行了大量的神吐槽,但是为了尽快成为坐在马背上的那个人&mdash;跟着趋势走，还是来赶快学习一下雨燕吧。</p>

<h2>xcode 6 beta</h2>

<p>伴随着雨燕发布的开发工具是<a href="http://pan.baidu.com/s/1gduwNqN">xcode 6测试版</a>,下载安装后。创建单个控制器的程序,我们可以知道可以选择<code>Objective-c</code>或者<code>Swift</code>语言来进行开发。不多说，选择Swift看看差异：</p>

<p><img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog3_swift-01.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<ul>
<li><h4>工程目录更简洁</h4>

<p>我们可以知道在xcode5的版本中，文件夹分为:工程文件夹、单元测试文件夹、框架文件夹和product文件夹。xcode6直接省去了框架文件夹。</p></li>
<li><h4>类文件的简化</h4>

<p>我们可以看到AppDelegate.swift和ViewController.swift两个类文件,main.storyboard一如往常。由此可知，类文件.h与.m合并为一个.swift,减少头文件与实现文件的切换过程。</p></li>
<li><h4>更少的支持文件</h4>

<p>没有了main.m程序入口文件、prefix.pch文件和国际化语言plist文件,仅仅剩下一个yourproject.plist配置文件。</p></li>
<li><h4>没有默认的lib文件</h4>

<p>通过.swift<code>import UIKit</code>和target>> build phase的link binary with lib 为空可知：<code>foundation.framework</code>、<code>UIKit.framework</code>与<code>XCTest.framework</code>三个基础框架系统不在显示，UIKit将作为必须框架自动为您导入到工程中.说明了:系统其实还是自动为您导入了一个UIKit框架，但以后link binary lib中将直接显示你导入和用到的framework&amp;lib文件。</p></li>
</ul>


<h2>进入swift世界</h2>

<p><code>Swift</code>是建立在C与Objective-c优点上的用于编写IOS和Mac OSX应用的一门新语言。为了实现更简单、灵活而有趣的编程，它摒弃了C语言兼容上的限制性，集合了更多的安全编程模块和现代的编程特性。</p>

<h4>再见hello world</h4>

<p>按照编程界惯例，来写一条hello world。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>恭喜您，你学会了一门语言！lol，是不是很熟悉呢？其实就是C上的log语句，只不过少了分号。对的,swift允许您：</p>

<blockquote><h5>1. 不导入基础库。如i/o或者string文件。</h5>

<h5>2. 不需要main函数。在任何全局范围内写语句，都会被当作是入口。囧，当然这在工程里还是从appDelegate开始。</h5>

<h5>3. 不需要分号。blog主表示再次冒汗。</h5></blockquote>

<h4>常量与变量</h4>

<p>swift中对于简单型数据只有两个关键字,常量<code>let</code>和变量<code>var</code>。赋值时<code>变量名</code>与<code>=</code>必须用<code>空格</code>分开，否则编译器报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/*------对于常量，你必须给他赋一个值-----------*/</span>
</span><span class='line'><span class="n">let</span> <span class="n">implicInt</span>    <span class="o">=</span> <span class="mi">70</span>          <span class="o">//</span><span class="err">不明确的赋值</span>
</span><span class='line'><span class="n">let</span> <span class="n">implicDouble</span> <span class="o">=</span> <span class="mi">70</span><span class="o">.</span><span class="mi">0</span>        <span class="o">//</span><span class="err">不明确的赋值</span>
</span><span class='line'><span class="n">let</span> <span class="ss">explicDouble</span><span class="p">:</span><span class="no">Double</span> <span class="o">=</span> <span class="mi">70</span>   <span class="o">//</span><span class="err">明确说明是</span><span class="n">double</span><span class="err">类型赋值</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/*------对于类型转换，必须明确指出-----------*/</span>
</span><span class='line'><span class="n">let</span> <span class="n">str</span>        <span class="o">=</span> <span class="s2">&quot;this is string&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">int_a</span>  <span class="o">=</span> <span class="mi">70</span>
</span><span class='line'><span class="n">let</span> <span class="n">int_b</span>  <span class="o">=</span> <span class="mi">80</span>
</span><span class='line'><span class="n">let</span> <span class="n">str_int</span>    <span class="o">=</span> <span class="n">str</span> <span class="o">+</span> <span class="nb">String</span><span class="p">(</span><span class="n">int_a</span><span class="p">)</span> <span class="sr">//</span><span class="err">您必须明确指出需要转换类型，否则编译器会报错。</span>
</span><span class='line'><span class="n">let</span> <span class="n">string_ing</span> <span class="o">=</span> <span class="s2">&quot;\(int_a) + \(int_b) = \(int_a+int_b)&quot;</span> <span class="sr">//</span><span class="err">另一种转换</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>可空变量</code>既可以是一个值，也可以是一个nil来表明该值不存在。可空变量在变量名后用<code>var 变量名:数据类型?</code>表示。</p>

<h4>数组与字典</h4>

<p>通过<code>[]</code>来创建数组与字典，并且通过<code>索引</code>或者<code>键值</code>来创建元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/*------创建空数组或字典-----------*/</span>
</span><span class='line'><span class="n">let</span> <span class="n">emptyarr</span> <span class="o">=</span> <span class="nb">String</span><span class="o">[]</span><span class="p">()</span>
</span><span class='line'><span class="n">let</span> <span class="n">emptydic</span> <span class="o">=</span> <span class="no">Dictionary</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span><span class="n">float</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/*------您也可以这样引用空数组-----------*/</span>
</span><span class='line'>     <span class="n">emptyarr</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>     <span class="n">emptydic</span> <span class="o">=</span> <span class="o">[</span><span class="p">:</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/*------创建带值的数组或字典-----------*/</span>
</span><span class='line'><span class="n">var</span> <span class="n">letters</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;A&quot;</span><span class="p">,</span><span class="s2">&quot;B&quot;</span><span class="p">,</span><span class="s2">&quot;C&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">letters</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="n">letters</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;keyA&quot;</span><span class="ss">:&quot;A&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;keyB&quot;</span><span class="ss">:&quot;B&quot;</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>控制流</h4>

<p>使用<code>if</code>和<code>switch</code>作为控制条件，使用<code>for</code>、<code>for-in</code>、<code>while</code>和<code>do-while</code>循环迭代。它们的参数是可选的，但是主体是必须的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/*------迭代方式-----------*/</span>
</span><span class='line'><span class="n">let</span> <span class="n">arrs</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="o">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">aVar</span> <span class="k">in</span> <span class="n">arrs</span> <span class="p">{</span>
</span><span class='line'><span class="n">result</span> <span class="o">+=</span> <span class="n">aVar</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;result is:\(result)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/*------if 条件语句必须是明确的布尔值-----------*/</span>
</span><span class='line'><span class="n">var</span> <span class="n">notAboolen</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">if</span> <span class="n">notAboolen</span> <span class="p">{}</span>     <span class="sr">//</span><span class="err">这种方式是错的</span><span class="p">,</span><span class="n">switf</span> <span class="err">不知道</span><span class="n">notAboolen</span><span class="err">是布尔值。</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以用<code>let</code>配合<code>可空变量</code>作为if的条件判断。在条件语句中可空变量赋值给let常量后,如果是nil则常量变为false布尔型;否则为true。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="ss">optVar</span><span class="p">:</span> <span class="nb">String</span><span class="p">?</span> <span class="o">=</span> <span class="s2">&quot;John&quot;</span>  <span class="sr">//</span><span class="ss">result</span><span class="p">:</span> <span class="n">hello</span><span class="p">,</span><span class="n">john</span>
</span><span class='line'><span class="sr">//o</span><span class="n">ptVar</span> <span class="o">=</span> <span class="kp">nil</span>                <span class="sr">//</span><span class="ss">result</span><span class="p">:</span> <span class="n">hello!</span>
</span><span class='line'><span class="n">var</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="nb">name</span> <span class="o">=</span> <span class="n">optVar</span>
</span><span class='line'><span class="k">if</span> <span class="nb">name</span> <span class="p">{</span>                      <span class="sr">//</span><span class="err">也可以这样写</span> <span class="k">if</span> <span class="n">let</span> <span class="nb">name</span> <span class="o">=</span> <span class="n">optVar</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">greeting</span> <span class="o">=</span> <span class="s2">&quot;Hello, \(name)&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(greeting)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>swith 语句</h4>

<p><code>switch</code>语句支持所有类型的比较，不仅限与整型条件,也可以是复杂的判断操作等,无break语句。在swift中<code>default</code>条件是不能少的，并且最起码要有一条执行语句。而且执行完一个判断条件主体,程序直接跳出swith块。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">vResult</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">vegetable</span> <span class="o">=</span> <span class="s2">&quot;red pepper&quot;</span>
</span><span class='line'><span class="n">switch</span> <span class="n">vegetable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s2">&quot;celery&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">vResult</span> <span class="o">=</span> <span class="s2">&quot;Add some raisins and make ants on a log.&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s2">&quot;cucumber&quot;</span><span class="p">,</span> <span class="s2">&quot;watercress&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">vResult</span> <span class="o">=</span> <span class="s2">&quot;That would make a good tea sandwich.&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">let</span> <span class="n">x</span> <span class="n">where</span> <span class="n">x</span><span class="o">.</span><span class="n">hasSuffix</span><span class="p">(</span><span class="s2">&quot;pepper&quot;</span><span class="p">):</span> <span class="sr">//</span> <span class="n">x</span><span class="err">变量尾部是否包含</span><span class="n">pepper</span>
</span><span class='line'>        <span class="n">vResult</span> <span class="o">=</span> <span class="s2">&quot;Is it a spicy \(x)?&quot;</span>
</span><span class='line'>    <span class="ss">default</span><span class="p">:</span>                                       <span class="sr">//</span><span class="err">不可少</span>
</span><span class='line'>        <span class="n">vResult</span> <span class="o">=</span> <span class="s2">&quot;Everything tastes good in soup.&quot;</span><span class="o">//</span><span class="err">最起码包含一条语句</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(vResult)&quot;</span><span class="p">)</span>     <span class="sr">//</span> <span class="ss">result</span><span class="p">:</span><span class="no">Is</span> <span class="n">it</span> <span class="n">a</span> <span class="n">spicy</span> <span class="n">red</span> <span class="n">pepper?</span>
</span></code></pre></td></tr></table></div></figure>


<h4>for-in 语句</h4>

<p>for-in 对于枚举一个字典,我们可以使用两个用<code>(键,值)</code>来作为枚举方式的过程变量。对比OC来说，这不失为是一种更简洁的方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">anEmployee</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;company&quot;</span><span class="ss">:&quot;myCompamy&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;empName&quot;</span><span class="ss">:&quot;jonz&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;department&quot;</span><span class="ss">:&quot;dev&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;salary&quot;</span><span class="ss">:&quot;3000&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;here is an employee infomation:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">anEmployee</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s2">&quot;       \(key):\(value)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">/*-------the result is:--------------*/</span>
</span><span class='line'><span class="n">here</span> <span class="n">is</span> <span class="n">an</span> <span class="n">employee</span> <span class="ss">infomation</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">empName</span><span class="p">:</span><span class="n">jonz</span>
</span><span class='line'>    <span class="ss">department</span><span class="p">:</span><span class="n">dev</span>
</span><span class='line'>    <span class="ss">salary</span><span class="p">:</span><span class="mi">3000</span>
</span><span class='line'>    <span class="ss">company</span><span class="p">:</span><span class="n">myCompamy</span>
</span></code></pre></td></tr></table></div></figure>


<h4>使用<code>..</code>和<code>...</code>来表示范围</h4>

<p>对于明确循环界限的迭代，我们可以使用<code>..</code>来作循环。比如求从0到3之间的数字和：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="p">{</span> <span class="sr">//</span><span class="err">注意迭代编程中的少</span><span class="mi">1</span><span class="err">问题，这里相当于</span><span class="k">for</span> <span class="n">var</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="n">i</span><span class="o">++</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">+=</span> <span class="n">i</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(count)&quot;</span><span class="p">)</span> <span class="sr">//</span><span class="n">result</span> <span class="ss">is</span><span class="p">:</span><span class="mi">6</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">3</span><span class="p">{</span> <span class="sr">//</span><span class="err">注意迭代编程中的少</span><span class="mi">1</span><span class="err">问题，这里相当于</span><span class="k">for</span> <span class="n">var</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">+=</span> <span class="n">i</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(count)&quot;</span><span class="p">)</span> <span class="sr">//</span><span class="n">result</span> <span class="ss">is</span><span class="p">:</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们知道，新的特性使语句更加简短,<code>..</code>不包含范围的上界，<code>...</code>包含了范围的上界.</p>

<h2>end line</h2>

<p>好了,就先写到这里。对于编程里的函数与类、对象，由于内容比较多将记录在下一篇blog里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 搭建记录]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/05/28/octopress-da-jian-ji-lu/"/>
    <updated>2014-05-28T23:17:39+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/05/28/octopress-da-jian-ji-lu</id>
    <content type="html"><![CDATA[<p>花了大半天的时间研究了octopress的搭建，不会命令行的悲剧。虽然网上有许多教程，但是自己做了一遍，才发现也没有那么简单。菜鸟一思考，上帝和神人就发笑。：）</p>

<h2>基本搭建</h2>

<p>具体的搭建，在这里就不一一详细描述，网上一抓一大把。大家可以参考一下大神们的一些博客:</p>

<ul>
<li>唐巧的技术博客里《<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">像写程序一样写博客：搭建基于github的博客</a>》</li>
<li>octopress官方步骤《<a href="http://octopress.org/docs/setup/">英文:Octopress Setup</a>》</li>
</ul>


<p><strong>在这里简单描述一下步骤:</strong></p>

<p> 1.安装git环境，mac上自带git。若其他环境，请google之。<br/>
 2.安装<a href="http://octopress.org/docs/setup/rbenv">rbenv</a>或者<a href="http://octopress.org/docs/setup/rvm/">RVM</a><br/>
 3.使用git从github上下载octopress安装文件,并且用终端安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#－－－－－－－－－－－－－下载过程－－－－－－－－－－－－－－－－－－－－－－－－ 
</span><span class='line'>git clone git://github.com/imathis/octopress.git octopress  //github上下载，等待下载完成
</span><span class='line'>cd  octopress                                               //移动到octopress文件夹  
</span><span class='line'>#－－－－－－－－－－－－－安装过程－－－－－－－－－－－－－－－－－－－－－－－－  
</span><span class='line'>gem    install bundler 
</span><span class='line'>rbenv  rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>bundle install
</span><span class='line'>#－－－－－－－－－－－－－安装默认主题－－－－－－－－－－－－－－－－－－－－－－－－ 
</span><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure>


<p>
以上步骤操作完后，输入rake preview,然后在safari上输入localhost:4000或者127.0.0.01:4000(推荐)，预览的blog主题效果。在这里，自己遇到了safari显示为空。原因是在safari7和mac os 10.9上有bug,提供的<a href="https://github.com/imathis/octopress/issues/1395">解决办法</a>见链接。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#－－－－－－－－－－－－－预览主题－－－－－－－－－－－－－－－－－－－－－－－－
</span><span class='line'>rake preview                        //输入后，通过safari url: 127.0.0.01:4000上预览
</span><span class='line'>#－－－－－－－－－－－－－解决预览空白方法－－－－－－－－－－－－－－－－－－－－－－－－
</span><span class='line'># $ echo gem \"thin\" &gt;&gt; Gemfile
</span><span class='line'># $ bundle install</span></code></pre></td></tr></table></div></figure>


<p>4.github上创建一个博客地址。以自己的账号(用户名:dev-Zhuang)为例子，说一下步骤：<br/>
创建github账号后，点New repository创建一个新的repository，命名(必须)为：dev-Zhuang.github.com即可。<br/>
这里不需要到settings中勾选automatic page generate，保持代码库为空，然后将你本地的博客上传到代码库即可。自己在这一步参考了网上的资料，走了不少弯路，导致了上传过程中git不断的报错，T_T。</p>

<p>5.配置博客，然后上传到github上。<br/>
这里以后每次写完blog，都要用rake generate和rake deploy上传。配置博客过程就不在细说，自行参考相关文献。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>－－－－－－－－－－－－－设置上传地址－－－－－－－－－－－－－－－－－－－－－－－－
</span><span class='line'>rake setup_github_pages
</span><span class='line'>－－－－－－－－－－－－－在要求输入的地址处输入,然后输入账号密码－－－－－－－－－－
</span><span class='line'>https://github.com/dev-Zhuang/dev-Zhuang.github.com.git
</span><span class='line'>rake generate       //重新生成
</span><span class='line'>rake deploy        //上传</span></code></pre></td></tr></table></div></figure>


<p>
6. 搭建分享平台与评论系统。<br/>
   这一步见唐巧boy中的内容。微博平台拷贝一下代码，修改一下显示参数即可。评论系统用的是友言的,注册拷贝代码.因为改系统是根据uid和文章index来做评论依据，大家需要先注册自己的账号获取uid。so easy！</p>

<p>好了，就写到这里。学习<a href="http://zh.wikipedia.org/wiki/Markdown">markdown语法</a>，写自己的博客去吧，have fun！</p>
]]></content>
  </entry>
  
</feed>
