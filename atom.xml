<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[数字夜话的博客]]></title>
  <link href="http://dev-zhuang.github.io/atom.xml" rel="self"/>
  <link href="http://dev-zhuang.github.io/"/>
  <updated>2014-07-04T10:01:27+08:00</updated>
  <id>http://dev-zhuang.github.io/</id>
  <author>
    <name><![CDATA[数字夜话]]></name>
    <email><![CDATA[jonz.tech@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[流媒体基本信息]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/07/03/liu-mei-ti-ji-ben-xin-xi/"/>
    <updated>2014-07-03T09:22:00+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/07/03/liu-mei-ti-ji-ben-xin-xi</id>
    <content type="html"><![CDATA[<h4>术语表（Glossary）</h4>

<p>5.1 环绕声（5.1 Surround Sound）：一个环绕声扬声器配置包括5个扬声器位于一个圆周的具体位置和一个低音炮（”.1”）.扬声器频道同在位于：左、中、右、左环绕、右环绕和LFE（低频效果）。</p>

<p>8.24 有时候写作Q8.24 或者fx8.24.定点采样大小(替代32位浮点采样)被当作标准的音频采样类型，来处理线性pcm音频。在8.24音频样本中，左边8位代表整数基点，右边24位代表小数基点。</p>

<p>AAC 高级音频编码(advanced audio coding):一个压缩，有损的感知编码方案。1997年ISO/IEC 13818-7将AAC作为MPEG-2的一部分，成为MPEG-2 AAC。并在MPEG-4中做了增强，MPEG-4 AAC。根据发表在ISO/IEC JTC1/SC29/WG11, N2006 上的结果看，MPEG-2 AAC比MPEG-1，layer3（mp3）在同个位速率（bit rate）上有更好的音频质量。MPEG-4 AAC扩展了MPEG-2 AAC 的额外编码工具。</p>

<p>AC－3 有dolby laboratories 开发的一个压缩，有损的感知音频格式。</p>

<p>active 在iOS中用于在播放或者录音时描述audio session的状态是否可持续。比较inactive。</p>

<p>ADC 模拟数字转换器(analog-to-digital converter) 一个能将样本与量化的模拟信号转换成数字信号的电子元件。ADCs的特征有采样率、幅度分辨率、其他失真特性和噪声层。专业的音频工具通常将ADCs转成线性响应。</p>

<p>ADPCM 自适应脉冲编码调制 (adaptive delta pulse code modulation)：在一个动态范围内使模拟信号跟随最少的位速率，它是变体的脉码调制和扩展的差分脉冲编码调制。</p>

<p>音频工程协会（Audio Engineering Society，AES):一个国际性的专业音频协会，它们已经颁布了许多关于数字音频的重要标准。</p>

<p>AES-3 一个在1992年发布的，由AES定义的数字音频传输标准。也叫做AES/EBU接口，等同于IEC 60958 第四部分。AES－3标准包括不同的物理链接：平衡双绞线，非平衡同轴电缆和光纤。AES－3的诞生来源于S/PDIF (Sony/Phillips Digital Interface)标准。</p>

<p>采样率（sample rate）：或称“采样速率”，是每秒内采样点（sample）的密集程度，单位是赫兹（Hz）。
采样深度（sample depth）：或称“采样精度”，就是对采样点的采样精确度。单位是比特（bit）。
比特率（Bit rate）：亦称“位速率”，是单位时间内传输送或处理的比特的数量。比特率经常在电信领域用作连接速度、传输速度、信道容量、最大吞吐量和数字带宽容量的同义词，根据位深的幅度分辨率，量化误差</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[明白AVFoundation]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/06/30/ming-bai-avfoundation/"/>
    <updated>2014-06-30T09:04:03+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/06/30/ming-bai-avfoundation</id>
    <content type="html"><![CDATA[<p>AVFoundation 基本函括了基本的音频操作，信息捕获、编辑基本信息与影片读写。这里只说简单的音频操作。</p>

<h4>什么时候使用AVFoundation</h4>

<blockquote><p>1.获取媒体属性 <br/>
2.自定义播放UI和行为  <br/>
3.组成与组合媒体  <br/>
4.重定义媒体信息 <br/>
5.控制相机特性</p></blockquote>

<h4>AVFoundation位置</h4>

<p>AVFoundation 位于核心层上层，在UIKit下层。
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-1.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<h4>AVFoundation类分组</h4>

<p>AVFoundation类分组主要可以分成4部分：播放设置、信息捕获、编辑和读写4块。</p>

<h4>播放（playback）</h4>

<h5>AVAsset</h5>

<p>AVAsset是定时的视听媒体，它可以是视频、影片、歌曲、播客节目；可以是本地或者远程的；也可以是限定或者非限定的流；<br/>
获取一个AVAsset的方式有：程序捆绑；媒体库；图片库；获取网络地址； <br/>
AVAsset的组成：AVAssetTrackSegment->AVAssetTrack->AVAsset;  <br/>
AVAssect信息获取会花费一定时间的原因：读取不同的文件格式、大文件文件信息读取，网络文件读取 <br/>
异步键值加载协议：告诉我们媒体什么时候值有效，可以准备播放。</p>

<h5>AVPlayer</h5>

<p>AVPlayer是一个控制对象，它可以做的操作有：播放、停止和速率；不同AVAsset可以有不同的播放属性。</p>

<p>一个AVPlayer可以有多个AVAsset，OC通过AVPlayerItem来协调AVAsst和AVPlayer之间的关系。AVPlayerItem与AVAsset一样，同样有AVPlayerItemTrack对象。</p>

<h5>AVPlayerLayer</h5>

<p>播放对象与视图之间的实现需要通过AVPlayerLayer来控制。具体播放一个音频视频的步骤是：</p>

<p>播放步骤集合：</p>

<blockquote><p>1.创建一个AVAsset<br/>
2.告诉asset的Track可以被加载了<br/>
3.一旦加载，为asset创建一个PlayerItem<br/>
4.把Item赋值给Player<br/>
5.把Player复制给PlayerLayer<br/>
6.等待直到Item准备好播放，然后开始播放。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">AVAsset</span> <span class="o">*</span><span class="n">asset</span> <span class="o">=</span> <span class="o">[</span><span class="no">AVURLAsset</span> <span class="ss">URLAssetWithURL</span><span class="p">:</span><span class="n">fileURL</span> <span class="ss">options</span><span class="p">:</span><span class="kp">nil</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="no">NSArray</span> <span class="o">*</span><span class="n">requestKeys</span> <span class="o">=</span> <span class="o">[</span><span class="no">NSArray</span> <span class="ss">arrayWithObjects</span><span class="p">:</span><span class="err">@“</span><span class="n">tracks</span><span class="err">”</span><span class="p">,</span><span class="err">@”</span><span class="n">playable</span><span class="err">”</span><span class="p">,</span><span class="kp">nil</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="o">[</span><span class="n">asset</span> <span class="ss">loadValuesAsynchoronouslyForKeys</span><span class="p">:</span><span class="n">requestKeys</span> <span class="ss">competionHandler</span><span class="p">:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="sr">//</span><span class="n">complete</span> <span class="n">block</span> <span class="n">here</span>
</span><span class='line'>      <span class="no">NSError</span> <span class="o">*</span><span class="n">err</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">;</span>
</span><span class='line'>      <span class="no">AVKeyValueStatus</span> <span class="n">status</span> <span class="o">=[</span><span class="n">asset</span> <span class="ss">statusOfValueForKey</span><span class="p">:</span><span class="err">@“</span><span class="n">tracks</span><span class="err">”</span><span class="p">,</span><span class="ss">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">status</span> <span class="o">==</span> <span class="no">AVKeyValueStatusLoaded</span><span class="p">){</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">.</span><span class="n">PlayerItem</span> <span class="o">=</span> <span class="o">[</span><span class="no">AVPlayerItem</span> <span class="ss">playerItemWithAsset</span><span class="p">:</span><span class="n">asset</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>          <span class="nb">self</span><span class="o">.</span><span class="n">player</span> <span class="o">=</span> <span class="o">[</span><span class="no">AVPlayer</span> <span class="ss">playerWithPlayerItem</span><span class="p">:</span><span class="n">playerItem</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>          <span class="o">[</span><span class="n">playerView</span>  <span class="ss">setPlayer</span><span class="p">:</span><span class="n">player</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class='line'>          <span class="sr">//</span><span class="n">don</span><span class="err">’</span><span class="n">t</span> <span class="nb">load</span> <span class="o">!</span> <span class="n">need</span> <span class="n">to</span> <span class="k">do</span> <span class="n">something</span><span class="o">~</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">}</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'><span class="sr">//</span><span class="err">等待加载完成</span>
</span><span class='line'><span class="n">static</span> <span class="n">void</span> <span class="o">*</span> <span class="n">playerItemStatueContext</span><span class="o">=&amp;</span><span class="no">PlayerItemStatue</span><span class="p">;</span>
</span><span class='line'><span class="sr">//</span><span class="err">添加观察者</span>
</span><span class='line'><span class="o">[</span><span class="n">playerItem</span> <span class="ss">addObserver</span><span class="p">:</span><span class="nb">self</span> <span class="ss">forKeyPath</span><span class="p">:</span><span class="nb">self</span> <span class="ss">options</span><span class="p">:</span><span class="mi">0</span> <span class="ss">context</span><span class="p">:</span><span class="n">playerItemStatueContext</span><span class="o">]</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span><span class="err">显示到</span><span class="n">uiview</span><span class="err">的</span><span class="n">layer</span><span class="err">层上</span>
</span><span class='line'><span class="sr">//</span><span class="err">添加结束通知</span>
</span><span class='line'><span class="o">[[</span><span class="no">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="o">]</span><span class="ss">addObser</span><span class="p">:</span><span class="nb">self</span> <span class="ss">selector</span><span class="p">:</span><span class="vi">@selector</span><span class="p">(</span><span class="ss">endMethod</span><span class="p">:)</span> <span class="nb">name</span><span class="ss">:AVPlayerItemDidPlayEndTimeNotification</span><span class="o">]</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加滑动条：开始：暂停播放和移除通知。  <br/>
更新播放时间：<code>seekToTime：</code></p>

<p>关于播放要记住的：</p>

<blockquote><p>1.Player 是一个控制器<br/>
2.player Item 控制当前状态<br/>
3.显示由一个player layer处理<br/>
4.注意你的播放队列。</p></blockquote>

<h4>编辑（Editing）</h4>

<p>由asset集合组成小块作品：它可以是多个不同asset的组成；</p>

<p>AVCompositonTrackSegment->AVCompositionTrack->AVComposition</p>

<p><img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-2.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;">
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-3.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<h5>时间控制需要注意的事项：</h5>

<blockquote><p>1.浮点数不允许精确的时间估算。<br/>
2.奇怪的时间尺度：29.97与30000/1001不相等。<br/>
3.混合的时间尺度：29.97fps视频和44.1kHz音频</p></blockquote>

<p>OS中使用的时间:
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-4.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;">
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-5.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;">
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-6.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<p>音频混合:</p>

<blockquote><p>1.临近的部分:AVCompostion；  <br/>
2.合并音频轨迹：AVAudioMix；  <br/>
3.合并视频轨迹：compositing;</p></blockquote>

<p>音频混合对象：AVMutableAudioMixInputParameters &ndash;>AVMutableAudioMix <br/>
每一个音频混合输入参数：1.由一个音轨组成。2。描述了如何通过时间调整声音。<br/>
默认的声音不涉及混合。</p>

<p>视频复合：</p>

<blockquote><p>1.临近的部分：AVComposition；  <br/>
2.合并音频轨迹：AVAudioMix；  <br/>
3.合并视频轨迹：AVVideoComposition；</p></blockquote>

<p>AVComposition和AVVideoComposition
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-7.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<p>AVVideoComposition需要做的：
对于每一个时间范围的AVAsset：<br/>
1.创建一个对应时间范围的AVMutableVideoCompositionInstruction对象。<br/>
2.对于每一个轨迹，都是复合的一部分：为轨迹创建一个AVMutableVideoCompositionLayerInstruction对象。<br/>
3.明确指定透明度。明确指定开始与结束的矩阵转换。</p>

<p>音频VS视频 <br/>
音频:1.对于每一个轨迹都是描述体积变化的时间范围。2.包含绝对的轨迹。 <br/>
视频:1.对于每一个时间范围，在轨迹上描述指令组成信息。2.必须明确的包含轨迹</p>

<p>协调合并对象进行工作：
AVAudioMix与AVVideoComposition：<br/>
1.他们都不是对象asset对象集合。<br/>
2.操作时使用对象Asset。 <br/>
3.要使用行为时，将传递到控制对象。可以合并的控制对象有：
<img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog5_avfoundation-8.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<p>编辑要记住的：</p>

<blockquote><p>1.composition是Asset的集合。他们由其他asset的segment对象组成。<br/>
2.他们通过轨迹进行音频混合。操作可能是不明显的。<br/>
3.视频Composition是一个合成的时间范围。它的操作要是显性的。</p></blockquote>

<h4>核心动画与媒体（Core animation and media）</h4>

<p>1.所有的UIKit渲染都使用了核心动画。 <br/>
2. 我们想对事物做的图形操作，如标题。<br/>
3.核心动画对于图形的渲染、投射和动画有极大的实用性。</p>

<p>核心动画与AV foundation<br/>
1. UIView使用CALayer 子类。 <br/>
2. AVFoundation 提供CALayer子类：如，演示影片使用AVPlayerLayer。显示捕获的视频使用   AVCaptureVideoPreviewLayer。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[单词记录]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/06/26/dan-ci-ji-lu/"/>
    <updated>2014-06-26T15:31:47+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/06/26/dan-ci-ji-lu</id>
    <content type="html"><![CDATA[<p>Audio Engineering Society
音频工程协会</p>

<p>differential pulse code modulation
差分脉冲编码调制</p>

<p>pulse-code modulation
脉码调制</p>

<p>adaptive delta pulse code modulation
自适应脉冲编码调制</p>

<p>noise floor
噪声层</p>

<p>quantization error    <br/>
量化误差</p>

<p>amplitude resolution      <br/>
幅度分辨率；幅值分辨率</p>

<p>in terms of
根据;用…的话; 就…而言; 以…为单位;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知识点收集(不定期更新)]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/06/05/zhi-shi-dian-shou-ji/"/>
    <updated>2014-06-05T18:41:47+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/06/05/zhi-shi-dian-shou-ji</id>
    <content type="html"><![CDATA[<h4>文件类型</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>enum { DT_UNKNOWN = 0,  // unknown type           未知类型
</span><span class='line'>    #define DT_UNKNOWN DT_UNKNOWN       
</span><span class='line'>    DT_FIFO = 1,     // a named pipe, or FIFO  管道类型或先进先出
</span><span class='line'>    #define DT_FIFO DT_FIFO
</span><span class='line'>    DT_CHR = 2,     // a character device      字符设备、流
</span><span class='line'>    #define DT_CHR DT_CHR
</span><span class='line'>    DT_DIR = 4,     // a directory             目录文件
</span><span class='line'>    #define DT_DIR DT_DIR
</span><span class='line'>    DT_BLK = 6,     // a block device          块设备
</span><span class='line'>    #define DT_BLK DT_BLK
</span><span class='line'>    DT_REG = 8,     // regular file            普通常规文件
</span><span class='line'>    #define DT_REG DT_REG
</span><span class='line'>    DT_LNK = 10,    // symbolic link           符号链接
</span><span class='line'>    #define DT_LNK DT_LNK
</span><span class='line'>    DT_SOCK = 12,   // local domain socket     socket套接字
</span><span class='line'>    #define DT_SOCK DT_SOCK                    
</span><span class='line'>    DT_WHT = 14     // whiteout                
</span><span class='line'>    #define DT_WHT DT_WHT  
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swift 函数与类]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/06/05/swift-han-shu-yu-lei/"/>
    <updated>2014-06-05T13:22:55+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/06/05/swift-han-shu-yu-lei</id>
    <content type="html"><![CDATA[<p>上一篇文章，初步了解了swift与xcode 6的内容。下面继续总结swift语法中的函数与类。</p>

<h4>函数与闭包 (Functions and Closures)</h4>

<hr />

<p>swift函数定义规则是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="err">函数名</span><span class="p">(</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">,</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span><span class="o">-&gt;</span> <span class="err">返回值类型</span> <span class="p">{</span>
</span><span class='line'>    <span class="sr">//</span><span class="err">函数主体</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">//</span><span class="err">例子</span>
</span><span class='line'><span class="n">func</span> <span class="n">sumOf</span><span class="p">(</span><span class="ss">numbers</span><span class="p">:</span> <span class="no">Int</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">numbers</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">sum</span> <span class="o">+=</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">sum</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">sumOf</span><span class="p">()</span>              <span class="sr">//</span> <span class="ss">result</span><span class="p">:</span><span class="mi">0</span>
</span><span class='line'><span class="n">sumOf</span><span class="p">(</span><span class="mi">42</span><span class="p">,</span> <span class="mi">597</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span>   <span class="sr">//</span> <span class="ss">result</span><span class="p">:</span><span class="mi">651</span>
</span><span class='line'>
</span><span class='line'><span class="o">/*-----------</span> <span class="err">返回一个函数名，它也是一个内嵌函数</span> <span class="o">------------*/</span>
</span><span class='line'><span class="n">func</span> <span class="err">函数名</span><span class="p">(</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">,</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">,</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="p">)</span><span class="o">-&gt;</span> <span class="p">(</span><span class="err">参数类型</span><span class="mi">1</span> <span class="o">-&gt;</span> <span class="err">返回类型</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">nestedFunc</span><span class="p">(</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="mi">1</span><span class="p">)</span><span class="err">－</span><span class="o">&gt;</span><span class="err">返回类型</span><span class="mi">1</span><span class="p">{</span>
</span><span class='line'>         <span class="k">return</span> <span class="err">返回类型</span><span class="mi">1</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">nestedFunc</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">//</span><span class="err">例子</span>
</span><span class='line'><span class="n">func</span> <span class="n">makeIncrementer</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="no">Int</span> <span class="o">-&gt;</span> <span class="no">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">addOne</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">number</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">addOne</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">increment</span> <span class="o">=</span> <span class="n">makeIncrementer</span><span class="p">()</span>
</span><span class='line'><span class="n">increment</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>  <span class="sr">//</span><span class="ss">result</span><span class="p">:</span> <span class="mi">8</span>
</span><span class='line'>
</span><span class='line'><span class="o">/*-----------</span> <span class="err">把函数作为函数的一个参数</span> <span class="o">------------*/</span>
</span><span class='line'><span class="n">func</span> <span class="err">函数名</span><span class="p">(</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">,</span><span class="err">函数名</span><span class="p">:</span><span class="err">参数类型</span> <span class="o">-&gt;</span> <span class="err">返回类型</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="err">返回类型</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">//</span><span class="err">例子</span><span class="p">,</span><span class="err">判断是否存在小于</span><span class="mi">10</span><span class="err">的数字</span>
</span><span class='line'><span class="n">func</span> <span class="n">hasAnyMatches</span><span class="p">(</span><span class="ss">list</span><span class="p">:</span> <span class="no">Int</span><span class="o">[]</span><span class="p">,</span> <span class="ss">condition</span><span class="p">:</span> <span class="no">Int</span> <span class="o">-&gt;</span> <span class="no">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">list</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">condition</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">func</span> <span class="n">lessThanTen</span><span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">number</span> <span class="o">&lt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="o">]</span>
</span><span class='line'><span class="n">hasAnyMatches</span><span class="p">(</span><span class="n">numbers</span><span class="p">,</span> <span class="n">lessThanTen</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>
* 返回类型支持返回多个值。方法是使用括号括住返回值:(rA,rB,rC)<br/>
* 参数列表也支持输入一组有效的参数值,将以数组形式传入函数。<br/>
* <code>内嵌函数</code>函数可以互相嵌套，内部函数可以使用外部函数的值。<br/>
* 函数可以作为一个类型被返回。<br/>
* 函数可以作为一个参数被传入到另外一个函数。</p>

<h4>闭包(Closure)</h4>

<p>闭包是一个不显示参数与返回类型的特殊函数，你可以通过闭包来写一个匿名函数，将主体写在<code>{}</code>中，用<code>in</code>区分<code>主体</code>与<code>参数值</code>、<code>返回类型</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="err">参数名</span><span class="p">:</span><span class="err">参数类型</span><span class="p">)</span><span class="o">-&gt;</span><span class="err">返回类型</span> <span class="k">in</span>
</span><span class='line'>    <span class="sr">//</span><span class="n">closure</span> <span class="n">body</span>
</span><span class='line'>    <span class="k">return</span> <span class="err">返回类型值</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">//</span> <span class="err">例子</span><span class="p">,</span><span class="err">返回一个包含运行闭包后的结果集合。先看看</span><span class="n">map</span><span class="err">的定义</span><span class="p">:</span>
</span><span class='line'><span class="sr">//</span><span class="err">—————————————</span><span class="k">begin</span><span class="err">—————————————————</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span> <span class="no">Return</span> <span class="n">a</span> <span class="nb">Array</span> <span class="n">containing</span> <span class="n">the</span> <span class="n">results</span> <span class="n">of</span> <span class="n">calling</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span> <span class="sb">`transform(x)`</span> <span class="n">on</span> <span class="n">each</span> <span class="n">element</span> <span class="sb">`x`</span> <span class="n">of</span> <span class="sb">`self`</span>
</span><span class='line'><span class="sr">//</span><span class="o">/</span> <span class="err">返回一组</span><span class="p">(</span><span class="err">每个子元素都</span><span class="p">)</span><span class="err">调用闭包后的结果集合</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">map</span><span class="o">&lt;</span><span class="n">U</span><span class="o">&gt;</span><span class="p">(</span><span class="ss">transform</span><span class="p">:</span> <span class="p">(</span><span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">U</span><span class="o">[]</span>
</span><span class='line'><span class="sr">//</span><span class="err">—————————————</span><span class="k">end</span><span class="err">—————————————————</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">12</span><span class="o">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">result</span>  <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="n">map</span><span class="p">(</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="ss">number</span><span class="p">:</span> <span class="no">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Int</span> <span class="k">in</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">number</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">result</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(result)&quot;</span><span class="p">)</span>  <span class="sr">//</span> <span class="ss">result</span><span class="p">:</span> <span class="o">[</span><span class="mi">60</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">36</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sort</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">){</span><span class="vg">$0</span><span class="o">&gt;</span><span class="vg">$1</span><span class="p">}</span>      <span class="sr">//</span><span class="err">结果执行过程看下图</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(result)&quot;</span><span class="p">);</span> <span class="sr">//</span><span class="ss">result</span><span class="p">:</span><span class="o">[</span><span class="mi">12</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog4_swift-01.jpg" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<h4>对象和类(Objects and Classes)</h4>

<p>类的定义如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="ss">classname</span><span class="p">:</span><span class="n">inheritType</span><span class="p">{</span><span class="o">//</span><span class="ss">:inheritType</span> <span class="err">是继承对象。在这里是可选值。</span>
</span><span class='line'><span class="sr">//</span><span class="n">here</span> <span class="n">is</span> <span class="n">your</span> <span class="n">code</span>
</span><span class='line'>  <span class="sr">//</span><span class="n">properties</span>
</span><span class='line'>      <span class="n">var</span> <span class="n">aString</span> <span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'><span class="sr">//</span><span class="o">//</span>      <span class="err">注意不允许在</span><span class="n">set</span><span class="err">方法中对自身值进行赋值，否则将导致死循环。</span>
</span><span class='line'><span class="sr">//</span>        <span class="n">set</span> <span class="p">{</span><span class="o">//</span><span class="err">默认传入值用</span><span class="n">newValue</span><span class="err">表示，也可以用</span> <span class="n">set</span> <span class="p">(</span><span class="n">newname</span><span class="p">)</span> <span class="err">来设置一个新值的别名</span>
</span><span class='line'><span class="sr">//</span>            <span class="n">println</span><span class="p">(</span><span class="s2">&quot;set value as \(newValue)&quot;</span><span class="p">)</span> <span class="sr">//</span><span class="n">println</span><span class="p">(</span><span class="s2">&quot;set value as \(newname)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="sr">//</span>        <span class="p">}</span>
</span><span class='line'><span class="sr">//</span>
</span><span class='line'><span class="sr">//</span>        <span class="n">get</span> <span class="p">{</span>
</span><span class='line'><span class="sr">//</span>            <span class="k">return</span> <span class="nb">self</span><span class="o">.</span><span class="n">aString</span>
</span><span class='line'><span class="sr">//</span>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span><span class="o">//</span>   <span class="err">注意，</span><span class="n">set</span> <span class="err">和</span><span class="n">get</span><span class="err">必须同时存在，否则编译器报错。</span>
</span><span class='line'><span class="sr">//</span><span class="o">//</span>        <span class="n">willSet</span><span class="err">和</span><span class="n">didSet</span><span class="err">必须同时存在。</span>
</span><span class='line'><span class="sr">//</span><span class="o">//</span>        <span class="n">set</span><span class="err">，</span><span class="n">get</span><span class="err">和</span><span class="n">willSet</span><span class="err">，</span><span class="n">didSet</span><span class="err">不能同时存在</span>
</span><span class='line'>        <span class="n">willSet</span> <span class="p">(</span><span class="n">anewvalue</span><span class="p">){</span> <span class="sr">//</span><span class="err">这里使用了新值的别名</span><span class="n">anewvalue</span><span class="err">，默认为</span><span class="n">newValue</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s2">&quot;self.aString:\(self.aString) set as newValue:\(anewvalue)&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">didSet</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s2">&quot;after set \(self.aString)&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>        <span class="sr">//</span> <span class="n">methodes</span>
</span><span class='line'>  <span class="n">init</span><span class="p">(){</span> <span class="sr">//</span><span class="err">构造方法，若不添加编译器将会报错。</span>
</span><span class='line'>      <span class="k">super</span><span class="o">.</span><span class="n">init</span><span class="p">();</span><span class="o">//</span><span class="err">调用父类的构造方法。注意：这里必须顺序，先初始化父类构造方法，子类才能调用父类属性与方法。</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">aString</span> <span class="o">=</span> <span class="n">aStr</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">deinit</span><span class="p">{</span><span class="o">//</span><span class="err">析构方法，可选方法：此方法不需要参数</span>
</span><span class='line'>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'><span class="sr">/*</span>
</span><span class='line'><span class="sr"> override func aFuncInInheritType(){/</span><span class="o">/</span><span class="err">父类方法重写</span><span class="o">.</span><span class="err">若需要重写父类方法，可以使用</span><span class="n">override</span><span class="err">关键字</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">*</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">var</span> <span class="ss">aclass</span><span class="p">:</span><span class="no">MyClass</span> <span class="o">=</span> <span class="no">MyClass</span><span class="p">(</span><span class="ss">aStr</span><span class="p">:</span><span class="s2">&quot;hello”);//此处willSet和didSet方法不执行。只执行了set和get方法</span>
</span><span class='line'><span class="s2">    aclass.aString = &quot;</span><span class="n">hello</span><span class="p">,</span><span class="n">word</span><span class="err">”</span><span class="p">;</span><span class="o">//</span><span class="err">此处执行</span><span class="n">willSet</span><span class="err">和</span><span class="n">didSet</span><span class="err">。说明</span><span class="n">willSet</span><span class="err">、</span><span class="n">didSet</span><span class="err">在初始化时不调用，</span><span class="n">set</span><span class="err">、</span><span class="n">get</span><span class="err">方法每次对其进行赋值，都会被调用。</span>
</span></code></pre></td></tr></table></div></figure>


<p>处理变量的可选值时,你可以在操作(比如方法、属性和子脚本)之前加?。如果?之前的 值是 nil,?后面的东西都会被忽略,并且整个表达式返回 nil。否则,?之后的东西都会被运行。</p>

<h4>枚举与结构体(Enumerations and Structures)</h4>

<h5>枚举用enum来定义：<code>enum 枚举名:枚举类型{枚举体}</code>，枚举类型可选。例如：</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="err">定义扑克的</span><span class="n">A</span><span class="err">－</span><span class="n">K</span><span class="err">，数值从</span><span class="mi">1</span><span class="err">开始增加，且定义一个</span><span class="n">simpleDescription</span><span class="err">函数，用于输出切换数值和名称。</span>
</span><span class='line'><span class="n">enum</span> <span class="ss">Rank</span><span class="p">:</span> <span class="no">Int</span> <span class="p">{</span> <span class="sr">//</span><span class="err">若去掉</span><span class="ss">:Int</span> <span class="err">则不允许赋值</span><span class="no">Ace</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="no">Ace</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">case</span> <span class="no">Two</span><span class="p">,</span> <span class="no">Three</span><span class="p">,</span> <span class="no">Four</span><span class="p">,</span> <span class="no">Five</span><span class="p">,</span> <span class="no">Six</span><span class="p">,</span> <span class="no">Seven</span><span class="p">,</span> <span class="no">Eight</span><span class="p">,</span> <span class="no">Nine</span><span class="p">,</span> <span class="no">Ten</span>
</span><span class='line'>        <span class="k">case</span> <span class="no">Jack</span><span class="p">,</span> <span class="no">Queen</span><span class="p">,</span> <span class="no">King</span>
</span><span class='line'>        <span class="n">func</span> <span class="n">simpleDescription</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">switch</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="no">Rank</span><span class="o">.</span><span class="n">Ace</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="s2">&quot;ace&quot;</span>
</span><span class='line'>            <span class="k">case</span> <span class="no">Rank</span><span class="o">.</span><span class="n">Jack</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="s2">&quot;jack&quot;</span>
</span><span class='line'>            <span class="k">case</span> <span class="o">.</span><span class="n">Queen</span><span class="p">:</span>            <span class="sr">//</span><span class="err">可用</span><span class="sb">`.Queen`</span><span class="err">表示</span><span class="no">Rank</span><span class="o">.</span><span class="n">Queen</span>
</span><span class='line'>                <span class="k">return</span> <span class="s2">&quot;queen&quot;</span>
</span><span class='line'>            <span class="k">case</span> <span class="o">.</span><span class="n">King</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="s2">&quot;king&quot;</span>
</span><span class='line'>            <span class="ss">default</span><span class="p">:</span>
</span><span class='line'>                <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">toRaw</span><span class="p">())</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">queen</span> <span class="o">=</span> <span class="no">Rank</span><span class="o">.</span><span class="n">Queen</span>            <span class="sr">//</span><span class="err">枚举一个</span><span class="n">ace</span>
</span><span class='line'><span class="n">let</span> <span class="n">queenRawValue</span> <span class="o">=</span> <span class="n">queen</span><span class="o">.</span><span class="n">toRaw</span><span class="p">()</span>          <span class="sr">//</span><span class="err">切换为数值，</span><span class="ss">result</span><span class="p">:</span><span class="mi">12</span>
</span><span class='line'><span class="n">var</span> <span class="n">des</span> <span class="o">=</span> <span class="n">queen</span><span class="o">.</span><span class="n">simpleDescription</span><span class="p">()</span>      <span class="sr">//</span><span class="err">输出枚举字符描述</span><span class="p">,</span><span class="ss">result</span><span class="p">:</span><span class="n">ace</span>
</span><span class='line'><span class="k">if</span> <span class="n">let</span> <span class="n">convertedRank</span> <span class="o">=</span> <span class="no">Rank</span><span class="o">.</span><span class="n">fromRaw</span><span class="p">(</span><span class="n">queenRawValue</span><span class="p">)</span> <span class="p">{</span> <span class="sr">//</span><span class="err">将</span><span class="mi">12</span><span class="err">转换为枚举类型，等价于</span><span class="no">Rank</span><span class="o">.</span><span class="n">Queen</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">threeDescription</span> <span class="o">=</span> <span class="n">convertedRank</span><span class="o">.</span><span class="n">simpleDescription</span><span class="p">()</span>
</span><span class='line'>            <span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(threeDescription)&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>toRaw()转换为数值，fromRaw(avalue)将avalue转换为枚举型。</p>

<h4>接口与扩展(Protocols and Extensions)</h4>

<p>swift中同样用<code>protocol</code>来声明接口，类、枚举和结构体都可以实现接口。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">protocol</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SimpleClass</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="o">=</span> <span class="s2">&quot;A very simple class.&quot;</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">anotherProperty</span><span class="p">:</span> <span class="no">Int</span> <span class="o">=</span> <span class="mi">69105</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">simpleDescription</span> <span class="o">+=</span> <span class="s2">&quot;  Now 100% adjusted.&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">struct</span> <span class="ss">SimpleStructure</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="o">=</span> <span class="s2">&quot;A simple structure&quot;</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">simpleDescription</span> <span class="o">+=</span> <span class="s2">&quot; (adjusted)&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>mutating 用于修饰一个可被修改的函数体。当接口被类继承时，不需要用mutating 来重写方法体，当接口被枚举和结构体的使用，使用mutating关键字来重新修改结构体。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">extension</span> <span class="no">Int</span><span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">descript</span><span class="p">()</span><span class="o">-&gt;</span><span class="nb">String</span><span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s2">&quot;int value is:\(self)&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">extension</span> <span class="ss">Int</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="ss">simpleDescription</span><span class="p">:</span> <span class="nb">String</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;The number \(self)&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">mutating</span> <span class="n">func</span> <span class="n">adjust</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nb">self</span> <span class="o">+=</span> <span class="mi">42</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用extension为某个类型扩展变量或者方法。当运行时赋值对象与定义变量类型不符时，只实现变量类型的那部分实现。例如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="ss">simpleClassA</span><span class="p">:</span> <span class="no">SimpleClass</span> <span class="o">=</span> <span class="no">SimpleClass</span><span class="p">();</span>
</span><span class='line'><span class="n">simpleClassA</span><span class="o">.</span><span class="n">adjust</span><span class="p">();</span>
</span><span class='line'><span class="n">let</span> <span class="ss">protocolValue</span><span class="p">:</span> <span class="no">ExampleProtocol</span> <span class="o">=</span> <span class="n">simpleClassA</span><span class="p">;</span>  <span class="sr">//</span><span class="err">把</span><span class="n">simpleClass</span><span class="err">类赋值给</span><span class="n">protocolValue</span><span class="err">，</span><span class="n">protocolValue</span><span class="err">为接口类型时，编译器只将</span><span class="no">SimpleClass</span><span class="err">实现</span><span class="no">ExampleProtocol</span> <span class="err">赋值给</span><span class="n">protocolValue</span><span class="err">，所以你不能通过</span><span class="n">protocolValue</span><span class="err">调用</span><span class="n">simpleclassA</span><span class="err">的属性或方法。</span>
</span><span class='line'><span class="n">protocolValue</span><span class="o">.</span><span class="n">simpleDescription</span>
</span><span class='line'><span class="sr">//</span> <span class="n">protocolValue</span><span class="o">.</span><span class="n">anotherProperty</span>  <span class="sr">//</span> <span class="no">Uncomment</span> <span class="n">to</span> <span class="n">see</span> <span class="n">the</span> <span class="n">error</span>
</span></code></pre></td></tr></table></div></figure>


<h4>泛型(Generics)</h4>

<p>在尖括号里写一个名字来创建一个泛型函数或者类型。泛型类型可以在函数和方法中使用，也可以在类，枚举和结构体使用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">//</span><span class="err">函数定义的乏型</span>
</span><span class='line'><span class="n">func</span> <span class="n">funcGenerics</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="ss">item</span><span class="p">:</span><span class="n">T</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">T</span><span class="o">[]</span><span class="p">{</span> <span class="sr">//</span><span class="err">为方法定义泛型</span><span class="n">T</span><span class="p">,</span><span class="err">而</span><span class="n">T</span><span class="err">的类型是参数的格式（由参数判定）</span><span class="p">,</span><span class="err">返回是参数格式的数组</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="n">T</span><span class="o">[]</span><span class="p">();</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">+=</span> <span class="n">item</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">let</span> <span class="n">fg</span> <span class="o">=</span> <span class="n">funcGenerics</span><span class="p">(</span><span class="err">”</span><span class="n">hello</span><span class="err">”</span><span class="p">);</span><span class="o">//</span><span class="err">返回一个</span><span class="nb">String</span><span class="err">类型数组</span>
</span><span class='line'><span class="n">let</span> <span class="n">fg2</span><span class="o">=</span> <span class="n">funcGenerics</span><span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">141592628</span><span class="p">);</span><span class="o">//</span><span class="err">返回一个</span><span class="no">Double</span><span class="err">型数组。</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span><span class="err">类泛型</span>
</span><span class='line'><span class="k">class</span> <span class="n">classGenerics</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">func</span> <span class="nb">method</span><span class="p">(</span><span class="ss">a</span><span class="p">:</span><span class="n">T</span><span class="p">){</span>
</span><span class='line'>        <span class="n">println</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">var</span> <span class="n">gClass</span> <span class="o">=</span> <span class="n">classGenerics</span><span class="o">&lt;</span><span class="nb">String</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">gClass</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="s2">&quot;aString&quot;</span><span class="p">);</span>
</span><span class='line'><span class="sr">//</span><span class="err">或者－－－－－</span><span class="no">Double</span><span class="err">类型</span>
</span><span class='line'><span class="n">var</span> <span class="n">gClass</span> <span class="o">=</span> <span class="n">classGenerics</span><span class="o">&lt;</span><span class="no">Double</span><span class="o">&gt;</span><span class="p">();</span>
</span><span class='line'>    <span class="n">gClass</span><span class="o">.</span><span class="n">method</span><span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">1415926</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sr">//</span><span class="err">枚举泛型</span>
</span><span class='line'><span class="n">enum</span> <span class="n">enumGenerics</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">b</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
</span><span class='line'>        <span class="n">mutating</span> <span class="n">func</span> <span class="n">description</span><span class="p">(){</span>
</span><span class='line'>            <span class="n">switch</span> <span class="nb">self</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="ss">a</span><span class="p">:</span><span class="n">println</span><span class="p">(</span> <span class="s2">&quot;result is none&quot;</span><span class="p">);</span>
</span><span class='line'>                <span class="k">case</span> <span class="n">b</span><span class="p">(</span><span class="n">var</span> <span class="n">val</span><span class="p">)</span><span class="ss">:println</span><span class="p">(</span><span class="s2">&quot;result in b(T) is:\(val)”)//定义一个val变狼，类型为T</span>
</span><span class='line'><span class="s2">            }</span>
</span><span class='line'><span class="s2">        }</span>
</span><span class='line'><span class="s2">    }</span>
</span><span class='line'><span class="s2">var eg = enumGenerics&lt;Int&gt;.b(13);</span>
</span><span class='line'><span class="s2">    eg.description();</span>
</span><span class='line'><span class="s2">var eg = enumGenerics&lt;String&gt;.b(&quot;</span><span class="n">a</span> <span class="n">string</span> <span class="k">in</span> <span class="n">enum</span> <span class="no">Generics</span><span class="s2">&quot;);</span>
</span><span class='line'><span class="s2">    eg.description();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s2">//结构泛型</span>
</span><span class='line'><span class="s2">struct StructGenerics&lt;T&gt;{</span>
</span><span class='line'><span class="s2">     typealias ItemType = T //定义一个T类型别名。</span>
</span><span class='line'><span class="s2">     mutating func adjust(a: ItemType) {</span>
</span><span class='line'><span class="s2"> println(a);</span>
</span><span class='line'><span class="s2">     }</span>
</span><span class='line'><span class="s2">}</span>
</span><span class='line'><span class="s2">var sg = StructGenerics&lt;Int&gt;();</span>
</span><span class='line'><span class="s2">    sg.adjust(34);</span>
</span><span class='line'><span class="s2">var sg = StructGenerics&lt;String&gt;();</span>
</span><span class='line'><span class="s2">    sg.adjust(&quot;</span><span class="n">struct</span> <span class="n">result</span> <span class="n">is</span> <span class="mi">34</span><span class="s2">&quot;);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在类型名后面使用 where 来指定一个需求列表——例如,要限定实现一个协议的类型,需要限定两个类型要相同,或者限定一个类必须有一个特定的父类。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">func</span> <span class="n">anyCommonElements</span> <span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">U</span> <span class="n">where</span> <span class="ss">T</span><span class="p">:</span> <span class="no">Sequence</span><span class="p">,</span> <span class="ss">U</span><span class="p">:</span> <span class="no">Sequence</span><span class="p">,</span> <span class="n">T</span><span class="o">.</span><span class="n">GeneratorType</span><span class="o">.</span><span class="n">Element</span><span class="p">:</span> <span class="no">Equatable</span><span class="p">,</span> <span class="n">T</span><span class="o">.</span><span class="n">GeneratorType</span><span class="o">.</span><span class="n">Element</span> <span class="o">==</span> <span class="n">U</span><span class="o">.</span><span class="n">GeneratorType</span><span class="o">.</span><span class="n">Element</span><span class="o">&gt;</span> <span class="p">(</span><span class="ss">lhs</span><span class="p">:</span> <span class="n">T</span><span class="p">,</span> <span class="ss">rhs</span><span class="p">:</span> <span class="n">U</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="no">Bool</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">lhsItem</span> <span class="k">in</span> <span class="n">lhs</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">rhsItem</span> <span class="k">in</span> <span class="n">rhs</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">lhsItem</span> <span class="o">==</span> <span class="n">rhsItem</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kp">false</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">anyCommonElements</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Switf 初学习]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/06/04/switf-chu-xue-xi/"/>
    <updated>2014-06-04T05:31:29+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/06/04/switf-chu-xue-xi</id>
    <content type="html"><![CDATA[<p>wwwdc 2014大会,苹果推出了新语言&mdash;雨燕<code>swift</code>。虽然很多开发者如往年一样，进行了大量的神吐槽,但是为了尽快成为坐在马背上的那个人&mdash;跟着趋势走，还是来赶快学习一下雨燕吧。</p>

<h2>xcode 6 beta</h2>

<p>伴随着雨燕发布的开发工具是<a href="http://pan.baidu.com/s/1gduwNqN">xcode 6测试版</a>,下载安装后。创建单个控制器的程序,我们可以知道可以选择<code>Objective-c</code>或者<code>Swift</code>语言来进行开发。不多说，选择Swift看看差异：</p>

<p><img class="center" src="http://dev-zhuang.github.io/images/blogimages/blog3_swift-01.png" title="&#34;工程目录结构&#34;" alt="&#34;工程目录结构&#34;"></p>

<ul>
<li><h4>工程目录更简洁</h4>

<p>我们可以知道在xcode5的版本中，文件夹分为:工程文件夹、单元测试文件夹、框架文件夹和product文件夹。xcode6直接省去了框架文件夹。</p></li>
<li><h4>类文件的简化</h4>

<p>我们可以看到AppDelegate.swift和ViewController.swift两个类文件,main.storyboard一如往常。由此可知，类文件.h与.m合并为一个.swift,减少头文件与实现文件的切换过程。</p></li>
<li><h4>更少的支持文件</h4>

<p>没有了main.m程序入口文件、prefix.pch文件和国际化语言plist文件,仅仅剩下一个yourproject.plist配置文件。</p></li>
<li><h4>没有默认的lib文件</h4>

<p>通过.swift<code>import UIKit</code>和target>> build phase的link binary with lib 为空可知：<code>foundation.framework</code>、<code>UIKit.framework</code>与<code>XCTest.framework</code>三个基础框架系统不在显示，UIKit将作为必须框架自动为您导入到工程中.说明了:系统其实还是自动为您导入了一个UIKit框架，但以后link binary lib中将直接显示你导入和用到的framework&amp;lib文件。</p></li>
</ul>


<h2>进入swift世界</h2>

<p><code>Swift</code>是建立在C与Objective-c优点上的用于编写IOS和Mac OSX应用的一门新语言。为了实现更简单、灵活而有趣的编程，它摒弃了C语言兼容上的限制性，集合了更多的安全编程模块和现代的编程特性。</p>

<h4>再见hello world</h4>

<p>按照编程界惯例，来写一条hello world。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>恭喜您，你学会了一门语言！lol，是不是很熟悉呢？其实就是C上的log语句，只不过少了分号。对的,swift允许您：</p>

<blockquote><h5>1. 不导入基础库。如i/o或者string文件。</h5>

<h5>2. 不需要main函数。在任何全局范围内写语句，都会被当作是入口。囧，当然这在工程里还是从appDelegate开始。</h5>

<h5>3. 不需要分号。blog主表示再次冒汗。</h5></blockquote>

<h4>常量与变量</h4>

<p>swift中对于简单型数据只有两个关键字,常量<code>let</code>和变量<code>var</code>。赋值时<code>变量名</code>与<code>=</code>必须用<code>空格</code>分开，否则编译器报错。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/*------对于常量，你必须给他赋一个值-----------*/</span>
</span><span class='line'><span class="n">let</span> <span class="n">implicInt</span>    <span class="o">=</span> <span class="mi">70</span>          <span class="o">//</span><span class="err">不明确的赋值</span>
</span><span class='line'><span class="n">let</span> <span class="n">implicDouble</span> <span class="o">=</span> <span class="mi">70</span><span class="o">.</span><span class="mi">0</span>        <span class="o">//</span><span class="err">不明确的赋值</span>
</span><span class='line'><span class="n">let</span> <span class="ss">explicDouble</span><span class="p">:</span><span class="no">Double</span> <span class="o">=</span> <span class="mi">70</span>   <span class="o">//</span><span class="err">明确说明是</span><span class="n">double</span><span class="err">类型赋值</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/*------对于类型转换，必须明确指出-----------*/</span>
</span><span class='line'><span class="n">let</span> <span class="n">str</span>        <span class="o">=</span> <span class="s2">&quot;this is string&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">int_a</span>  <span class="o">=</span> <span class="mi">70</span>
</span><span class='line'><span class="n">let</span> <span class="n">int_b</span>  <span class="o">=</span> <span class="mi">80</span>
</span><span class='line'><span class="n">let</span> <span class="n">str_int</span>    <span class="o">=</span> <span class="n">str</span> <span class="o">+</span> <span class="nb">String</span><span class="p">(</span><span class="n">int_a</span><span class="p">)</span> <span class="sr">//</span><span class="err">您必须明确指出需要转换类型，否则编译器会报错。</span>
</span><span class='line'><span class="n">let</span> <span class="n">string_ing</span> <span class="o">=</span> <span class="s2">&quot;\(int_a) + \(int_b) = \(int_a+int_b)&quot;</span> <span class="sr">//</span><span class="err">另一种转换</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>可空变量</code>既可以是一个值，也可以是一个nil来表明该值不存在。可空变量在变量名后用<code>var 变量名:数据类型?</code>表示。</p>

<h4>数组与字典</h4>

<p>通过<code>[]</code>来创建数组与字典，并且通过<code>索引</code>或者<code>键值</code>来创建元素。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/*------创建空数组或字典-----------*/</span>
</span><span class='line'><span class="n">let</span> <span class="n">emptyarr</span> <span class="o">=</span> <span class="nb">String</span><span class="o">[]</span><span class="p">()</span>
</span><span class='line'><span class="n">let</span> <span class="n">emptydic</span> <span class="o">=</span> <span class="no">Dictionary</span><span class="o">&lt;</span><span class="n">string</span><span class="p">,</span><span class="n">float</span><span class="o">&gt;</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/*------您也可以这样引用空数组-----------*/</span>
</span><span class='line'>     <span class="n">emptyarr</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>     <span class="n">emptydic</span> <span class="o">=</span> <span class="o">[</span><span class="p">:</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/*------创建带值的数组或字典-----------*/</span>
</span><span class='line'><span class="n">var</span> <span class="n">letters</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;A&quot;</span><span class="p">,</span><span class="s2">&quot;B&quot;</span><span class="p">,</span><span class="s2">&quot;C&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">letters</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span>
</span><span class='line'><span class="n">var</span> <span class="n">letters</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;keyA&quot;</span><span class="ss">:&quot;A&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;keyB&quot;</span><span class="ss">:&quot;B&quot;</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h4>控制流</h4>

<p>使用<code>if</code>和<code>switch</code>作为控制条件，使用<code>for</code>、<code>for-in</code>、<code>while</code>和<code>do-while</code>循环迭代。它们的参数是可选的，但是主体是必须的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/*------迭代方式-----------*/</span>
</span><span class='line'><span class="n">let</span> <span class="n">arrs</span> <span class="o">=</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">40</span><span class="o">]</span>
</span><span class='line'><span class="n">var</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">aVar</span> <span class="k">in</span> <span class="n">arrs</span> <span class="p">{</span>
</span><span class='line'><span class="n">result</span> <span class="o">+=</span> <span class="n">aVar</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;result is:\(result)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="sr">/*------if 条件语句必须是明确的布尔值-----------*/</span>
</span><span class='line'><span class="n">var</span> <span class="n">notAboolen</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">if</span> <span class="n">notAboolen</span> <span class="p">{}</span>     <span class="sr">//</span><span class="err">这种方式是错的</span><span class="p">,</span><span class="n">switf</span> <span class="err">不知道</span><span class="n">notAboolen</span><span class="err">是布尔值。</span>
</span></code></pre></td></tr></table></div></figure>


<p>你可以用<code>let</code>配合<code>可空变量</code>作为if的条件判断。在条件语句中可空变量赋值给let常量后,如果是nil则常量变为false布尔型;否则为true。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="ss">optVar</span><span class="p">:</span> <span class="nb">String</span><span class="p">?</span> <span class="o">=</span> <span class="s2">&quot;John&quot;</span>  <span class="sr">//</span><span class="ss">result</span><span class="p">:</span> <span class="n">hello</span><span class="p">,</span><span class="n">john</span>
</span><span class='line'><span class="sr">//o</span><span class="n">ptVar</span> <span class="o">=</span> <span class="kp">nil</span>                <span class="sr">//</span><span class="ss">result</span><span class="p">:</span> <span class="n">hello!</span>
</span><span class='line'><span class="n">var</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s2">&quot;Hello!&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="nb">name</span> <span class="o">=</span> <span class="n">optVar</span>
</span><span class='line'><span class="k">if</span> <span class="nb">name</span> <span class="p">{</span>                      <span class="sr">//</span><span class="err">也可以这样写</span> <span class="k">if</span> <span class="n">let</span> <span class="nb">name</span> <span class="o">=</span> <span class="n">optVar</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">greeting</span> <span class="o">=</span> <span class="s2">&quot;Hello, \(name)&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(greeting)&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>swith 语句</h4>

<p><code>switch</code>语句支持所有类型的比较，不仅限与整型条件,也可以是复杂的判断操作等,无break语句。在swift中<code>default</code>条件是不能少的，并且最起码要有一条执行语句。而且执行完一个判断条件主体,程序直接跳出swith块。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">vResult</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="n">let</span> <span class="n">vegetable</span> <span class="o">=</span> <span class="s2">&quot;red pepper&quot;</span>
</span><span class='line'><span class="n">switch</span> <span class="n">vegetable</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="s2">&quot;celery&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">vResult</span> <span class="o">=</span> <span class="s2">&quot;Add some raisins and make ants on a log.&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="s2">&quot;cucumber&quot;</span><span class="p">,</span> <span class="s2">&quot;watercress&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">vResult</span> <span class="o">=</span> <span class="s2">&quot;That would make a good tea sandwich.&quot;</span>
</span><span class='line'>    <span class="k">case</span> <span class="n">let</span> <span class="n">x</span> <span class="n">where</span> <span class="n">x</span><span class="o">.</span><span class="n">hasSuffix</span><span class="p">(</span><span class="s2">&quot;pepper&quot;</span><span class="p">):</span> <span class="sr">//</span> <span class="n">x</span><span class="err">变量尾部是否包含</span><span class="n">pepper</span>
</span><span class='line'>        <span class="n">vResult</span> <span class="o">=</span> <span class="s2">&quot;Is it a spicy \(x)?&quot;</span>
</span><span class='line'>    <span class="ss">default</span><span class="p">:</span>                                       <span class="sr">//</span><span class="err">不可少</span>
</span><span class='line'>        <span class="n">vResult</span> <span class="o">=</span> <span class="s2">&quot;Everything tastes good in soup.&quot;</span><span class="o">//</span><span class="err">最起码包含一条语句</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(vResult)&quot;</span><span class="p">)</span>     <span class="sr">//</span> <span class="ss">result</span><span class="p">:</span><span class="no">Is</span> <span class="n">it</span> <span class="n">a</span> <span class="n">spicy</span> <span class="n">red</span> <span class="n">pepper?</span>
</span></code></pre></td></tr></table></div></figure>


<h4>for-in 语句</h4>

<p>for-in 对于枚举一个字典,我们可以使用两个用<code>(键,值)</code>来作为枚举方式的过程变量。对比OC来说，这不失为是一种更简洁的方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">anEmployee</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>    <span class="s2">&quot;company&quot;</span><span class="ss">:&quot;myCompamy&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;empName&quot;</span><span class="ss">:&quot;jonz&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;department&quot;</span><span class="ss">:&quot;dev&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;salary&quot;</span><span class="ss">:&quot;3000&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;here is an employee infomation:&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">key</span><span class="p">,</span><span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">anEmployee</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">println</span><span class="p">(</span><span class="s2">&quot;       \(key):\(value)&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="sr">/*-------the result is:--------------*/</span>
</span><span class='line'><span class="n">here</span> <span class="n">is</span> <span class="n">an</span> <span class="n">employee</span> <span class="ss">infomation</span><span class="p">:</span>
</span><span class='line'>    <span class="ss">empName</span><span class="p">:</span><span class="n">jonz</span>
</span><span class='line'>    <span class="ss">department</span><span class="p">:</span><span class="n">dev</span>
</span><span class='line'>    <span class="ss">salary</span><span class="p">:</span><span class="mi">3000</span>
</span><span class='line'>    <span class="ss">company</span><span class="p">:</span><span class="n">myCompamy</span>
</span></code></pre></td></tr></table></div></figure>


<h4>使用<code>..</code>和<code>...</code>来表示范围</h4>

<p>对于明确循环界限的迭代，我们可以使用<code>..</code>来作循环。比如求从0到3之间的数字和：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">var</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="p">{</span> <span class="sr">//</span><span class="err">注意迭代编程中的少</span><span class="mi">1</span><span class="err">问题，这里相当于</span><span class="k">for</span> <span class="n">var</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="n">i</span><span class="o">++</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">+=</span> <span class="n">i</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(count)&quot;</span><span class="p">)</span> <span class="sr">//</span><span class="n">result</span> <span class="ss">is</span><span class="p">:</span><span class="mi">6</span>
</span><span class='line'>
</span><span class='line'><span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">3</span><span class="p">{</span> <span class="sr">//</span><span class="err">注意迭代编程中的少</span><span class="mi">1</span><span class="err">问题，这里相当于</span><span class="k">for</span> <span class="n">var</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="mi">3</span><span class="p">;</span><span class="n">i</span><span class="o">++</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">+=</span> <span class="n">i</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">println</span><span class="p">(</span><span class="s2">&quot;\(count)&quot;</span><span class="p">)</span> <span class="sr">//</span><span class="n">result</span> <span class="ss">is</span><span class="p">:</span> <span class="mi">6</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们知道，新的特性使语句更加简短,<code>..</code>不包含范围的上界，<code>...</code>包含了范围的上界.</p>

<h2>end line</h2>

<p>好了,就先写到这里。对于编程里的函数与类、对象，由于内容比较多将记录在下一篇blog里。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 搭建记录]]></title>
    <link href="http://dev-zhuang.github.io/blog/2014/05/28/octopress-da-jian-ji-lu/"/>
    <updated>2014-05-28T23:17:39+08:00</updated>
    <id>http://dev-zhuang.github.io/blog/2014/05/28/octopress-da-jian-ji-lu</id>
    <content type="html"><![CDATA[<p>花了大半天的时间研究了octopress的搭建，不会命令行的悲剧。虽然网上有许多教程，但是自己做了一遍，才发现也没有那么简单。菜鸟一思考，上帝和神人就发笑。：）</p>

<h2>基本搭建</h2>

<p>具体的搭建，在这里就不一一详细描述，网上一抓一大把。大家可以参考一下大神们的一些博客:</p>

<ul>
<li>唐巧的技术博客里《<a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">像写程序一样写博客：搭建基于github的博客</a>》</li>
<li>octopress官方步骤《<a href="http://octopress.org/docs/setup/">英文:Octopress Setup</a>》</li>
</ul>


<p><strong>在这里简单描述一下步骤:</strong></p>

<p> 1.安装git环境，mac上自带git。若其他环境，请google之。<br/>
 2.安装<a href="http://octopress.org/docs/setup/rbenv">rbenv</a>或者<a href="http://octopress.org/docs/setup/rvm/">RVM</a><br/>
 3.使用git从github上下载octopress安装文件,并且用终端安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#－－－－－－－－－－－－－下载过程－－－－－－－－－－－－－－－－－－－－－－－－ 
</span><span class='line'>git clone git://github.com/imathis/octopress.git octopress  //github上下载，等待下载完成
</span><span class='line'>cd  octopress                                               //移动到octopress文件夹  
</span><span class='line'>#－－－－－－－－－－－－－安装过程－－－－－－－－－－－－－－－－－－－－－－－－  
</span><span class='line'>gem    install bundler 
</span><span class='line'>rbenv  rehash    # If you use rbenv, rehash to be able to run the bundle command
</span><span class='line'>bundle install
</span><span class='line'>#－－－－－－－－－－－－－安装默认主题－－－－－－－－－－－－－－－－－－－－－－－－ 
</span><span class='line'>rake install
</span></code></pre></td></tr></table></div></figure>


<p>
以上步骤操作完后，输入rake preview,然后在safari上输入localhost:4000或者127.0.0.01:4000(推荐)，预览的blog主题效果。在这里，自己遇到了safari显示为空。原因是在safari7和mac os 10.9上有bug,提供的<a href="https://github.com/imathis/octopress/issues/1395">解决办法</a>见链接。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#－－－－－－－－－－－－－预览主题－－－－－－－－－－－－－－－－－－－－－－－－
</span><span class='line'>rake preview                        //输入后，通过safari url: 127.0.0.01:4000上预览
</span><span class='line'>#－－－－－－－－－－－－－解决预览空白方法－－－－－－－－－－－－－－－－－－－－－－－－
</span><span class='line'># $ echo gem \"thin\" &gt;&gt; Gemfile
</span><span class='line'># $ bundle install</span></code></pre></td></tr></table></div></figure>


<p>4.github上创建一个博客地址。以自己的账号(用户名:dev-Zhuang)为例子，说一下步骤：<br/>
创建github账号后，点New repository创建一个新的repository，命名(必须)为：dev-Zhuang.github.com即可。<br/>
这里不需要到settings中勾选automatic page generate，保持代码库为空，然后将你本地的博客上传到代码库即可。自己在这一步参考了网上的资料，走了不少弯路，导致了上传过程中git不断的报错，T_T。</p>

<p>5.配置博客，然后上传到github上。<br/>
这里以后每次写完blog，都要用rake generate和rake deploy上传。配置博客过程就不在细说，自行参考相关文献。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>－－－－－－－－－－－－－设置上传地址－－－－－－－－－－－－－－－－－－－－－－－－
</span><span class='line'>rake setup_github_pages
</span><span class='line'>－－－－－－－－－－－－－在要求输入的地址处输入,然后输入账号密码－－－－－－－－－－
</span><span class='line'>https://github.com/dev-Zhuang/dev-Zhuang.github.com.git
</span><span class='line'>rake generate       //重新生成
</span><span class='line'>rake deploy        //上传</span></code></pre></td></tr></table></div></figure>


<p>
6. 搭建分享平台与评论系统。<br/>
   这一步见唐巧boy中的内容。微博平台拷贝一下代码，修改一下显示参数即可。评论系统用的是友言的,注册拷贝代码.因为改系统是根据uid和文章index来做评论依据，大家需要先注册自己的账号获取uid。so easy！</p>

<p>好了，就写到这里。学习<a href="http://zh.wikipedia.org/wiki/Markdown">markdown语法</a>，写自己的博客去吧，have fun！</p>
]]></content>
  </entry>
  
</feed>
